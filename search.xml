<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Node更新到8.0+导致的一些问题]]></title>
      <url>/2017/10/31/updatenode/</url>
      <content type="html"><![CDATA[<p>最近更新了<code>Node.js</code>，结果在使用<code>hexo new post</code>的时候开始报错：<br><a id="more"></a></p>
<h3 id="报错一-dyld"><a href="#报错一-dyld" class="headerlink" title="报错一 dyld"></a>报错一 dyld</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dyld: Library not loaded: /usr/local/opt/icu4c/lib/libicui18n.58.dylib</div><div class="line">  Referenced from: /usr/local/bin/node</div><div class="line">  Reason: image not found</div><div class="line">Abort trap: 6</div></pre></td></tr></table></figure>
<p>重新安装<code>node</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew reinstall node --without-icu4c</div></pre></td></tr></table></figure>
<p>成功解决！</p>
<h3 id="报错二-DTraceProviderBindings-node"><a href="#报错二-DTraceProviderBindings-node" class="headerlink" title="报错二 DTraceProviderBindings.node"></a>报错二 DTraceProviderBindings.node</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">Error: The module &apos;/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&apos;</div><div class="line">was compiled against a different Node.js version using</div><div class="line">NODE_MODULE_VERSION 51. This version of Node.js requires</div><div class="line">NODE_MODULE_VERSION 57. Please try re-compiling or re-installing</div><div class="line">the module (for instance, using `npm rebuild` or `npm install`).</div><div class="line">    at Object.Module._extensions..node (module.js:641:18)</div><div class="line">    at Module.load (module.js:531:32)</div><div class="line">    at tryModuleLoad (module.js:494:12)</div><div class="line">    at Function.Module._load (module.js:486:3)</div><div class="line">    at Module.require (module.js:556:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:612:30)</div><div class="line">    at Object.Module._extensions..js (module.js:623:10)</div><div class="line">    at Module.load (module.js:531:32)</div><div class="line">    at tryModuleLoad (module.js:494:12)</div><div class="line">    at Function.Module._load (module.js:486:3)</div><div class="line">    at Module.require (module.js:556:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:612:30)</div><div class="line">&#123; Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:513:15)</div><div class="line">    at Function.Module._load (module.js:463:25)</div><div class="line">    at Module.require (module.js:556:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:612:30)</div><div class="line">    at Object.Module._extensions..js (module.js:623:10)</div><div class="line">    at Module.load (module.js:531:32)</div><div class="line">    at tryModuleLoad (module.js:494:12)</div><div class="line">    at Function.Module._load (module.js:486:3)</div><div class="line">    at Module.require (module.js:556:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:612:30)</div><div class="line">    at Object.Module._extensions..js (module.js:623:10)</div><div class="line">    at Module.load (module.js:531:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&#123; Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:513:15)</div><div class="line">    at Function.Module._load (module.js:463:25)</div><div class="line">    at Module.require (module.js:556:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:612:30)</div><div class="line">    at Object.Module._extensions..js (module.js:623:10)</div><div class="line">    at Module.load (module.js:531:32)</div><div class="line">    at tryModuleLoad (module.js:494:12)</div><div class="line">    at Function.Module._load (module.js:486:3)</div><div class="line">    at Module.require (module.js:556:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:612:30)</div><div class="line">    at Object.Module._extensions..js (module.js:623:10)</div><div class="line">    at Module.load (module.js:531:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</div></pre></td></tr></table></figure>
<p><code>DTraceProviderBindings</code>针对的<code>node</code>版本错误，刚开始以为是<code>node_module</code>没有更新，因此重新安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ rm -rf node_modules</div><div class="line">$ npm install</div><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<p>没有解决，继续报错。。尝试重新安装<code>hexo命令行工具</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>成功解决！</p>
<h3 id="报错三-DeprecationWarning"><a href="#报错三-DeprecationWarning" class="headerlink" title="报错三 DeprecationWarning"></a>报错三 DeprecationWarning</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(node:14238) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</div></pre></td></tr></table></figure>
<p><code>DeprecationWarning</code>函数已经弃用，使用<code>--debug</code>参数调试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo version --debug  </div><div class="line">DEBUG Plugin loaded: hexo-deployer-git                                     </div><div class="line">[DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</div></pre></td></tr></table></figure>
<p>发现是<code>hexo-deployer-git</code>的问题，更新这个模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm update hexo-deployer-git</div></pre></td></tr></table></figure>
<p>没有成功，删除包再重新安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall hexo-deployer-git</div><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>成功解决！</p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[音乐情感数据集]]></title>
      <url>/2017/10/30/emodatasets/</url>
      <content type="html"><![CDATA[<p>本文收集了一些带情感标签的音乐数据库：<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>DATASET</th>
<th>META DATA</th>
<th>CONTENTS</th>
<th>WITH AUDIO</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://amg1608.blogspot.ca" target="_blank" rel="external">Amg1608</a></td>
<td>valence &amp; arousal</td>
<td>1608 excerpts (30s)</td>
<td>no</td>
</tr>
<tr>
<td><a href="http://cvml.unige.ch/databases/DEAM" target="_blank" rel="external">DEAM</a></td>
<td>valence &amp; arousal</td>
<td>1802 excerpts</td>
<td>yes</td>
</tr>
<tr>
<td><a href="http://www.eecs.qmul.ac.uk/mmv/datasets/deap/readme.html" target="_blank" rel="external">DEAPDataset</a></td>
<td>valence &amp; arousal &amp; dominance &amp; physiological data</td>
<td>120 music video excerpts</td>
<td>no</td>
</tr>
<tr>
<td><a href="http://cvml.unige.ch/databases/emoMusic" target="_blank" rel="external">emoMusic</a></td>
<td>arousal &amp; valence</td>
<td>744 excerpts (45s)</td>
<td>yes</td>
</tr>
<tr>
<td><a href="http://www.projects.science.uu.nl/memotion/emotifydata/" target="_blank" rel="external">Emotify</a></td>
<td>induced emotion</td>
<td>400 excerpts</td>
<td>yes</td>
</tr>
<tr>
<td><a href="https://hilab.di.ionio.gr/en/music-information-research/" target="_blank" rel="external">GMD</a></td>
<td>genre &amp; valence &amp; arousal</td>
<td>1400 songs</td>
<td>downloadable</td>
</tr>
<tr>
<td><a href="http://csea.phhp.ufl.edu/media/iadsmessage.html" target="_blank" rel="external">IADS</a></td>
<td>valence &amp; arousal &amp; dominance</td>
<td>111 sound snippets</td>
<td>yes</td>
</tr>
<tr>
<td><a href="https://github.com/johnglover/modal" target="_blank" rel="external">MOODetector:Bi-Modal</a></td>
<td>lyrics &amp; valence &amp; arousal</td>
<td>133 excerpts</td>
<td>yes</td>
</tr>
<tr>
<td><a href="https://github.com/johnglover/modal" target="_blank" rel="external">MOODetector:Multi-Modal</a></td>
<td>lyrics &amp; MIDI &amp; mood</td>
<td>903 excerpts (30s)</td>
<td>yes</td>
</tr>
<tr>
<td><a href="http://music.ece.drexel.edu/research/emotion/moodswingsturk" target="_blank" rel="external">moodswings</a></td>
<td>arousal &amp; valence</td>
<td>240 excerpts (30s)</td>
<td>no</td>
</tr>
<tr>
<td><a href="https://www.jyu.fi/hytk/fi/laitokset/mutku/en/research/projects2/past-projects/coe/materials/emotion/soundtracks/Index" target="_blank" rel="external">SoundTracks</a></td>
<td>valence &amp; energy &amp; tension &amp; mood</td>
<td>360+110 excerpts</td>
<td>yes</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> MIR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FFmpeg实用操作]]></title>
      <url>/2017/10/24/ffmpeg/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>最近的实验中有许多音频处理的工作，使用<code>FFmpeg</code>较为频繁，本文用于记录实验中使用过的操作（<a href="https://ffmpeg.org/ffmpeg-utils.html#time-duration-syntax" target="_blank" rel="external">官方文档</a>）以及其中遇到的一些问题（感谢<a href="http://davidaq.com/tutorial/2014/11/20/ffmpeg-commands.html" target="_blank" rel="external">DavidAQ</a>的答疑解惑）。<br><a id="more"></a></p>
<h3 id="转格式"><a href="#转格式" class="headerlink" title="转格式"></a>转格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ffmpeg -i Input.mp3 Output.wav</span></div></pre></td></tr></table></figure>
<h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><p>官网提供的命令:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ffmpeg -i Input.mp3 -ss Starttime -t Duration Output.mp3</span></div></pre></td></tr></table></figure>
<p>但是经过FFmpeg处理的音频文件，在苹果系统(OSX, IOS)以及苹果的播放器(ITunes, QuickTime)上往往会显示错误的长度时间。这是<code>FFmpeg</code>的Bug，需要添加参数<code>-write_xing</code>规避：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ffmpeg -i Input.mp3 -write_xing 0 -ss Starttime -t Duration Output.mp3</span></div></pre></td></tr></table></figure>
<p>或者指定音频编码器直接复制原来的编码：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ffmpeg -ss Starttime -i Input.mp3 -t Duration -acodec copy Output.mp3</span></div></pre></td></tr></table></figure>
<p>把<code>-ss</code>提到<code>-i</code>前面作为输入文件的处理参数，这样会先跳转到<code>Starttime</code>再开始解码，而原来的会从开始解码然后丢弃掉<code>Starttime</code>之前的结果，同时<code>-acodec copy</code>表示音频的编码不会发生改变，这样会大大提高速度。</p>
<blockquote>
<p>注意处理文件如果不是图片，不要让输入文件与输出文件相同，覆盖后会出现神奇的Bug。</p>
</blockquote>
<h3 id="淡入（淡出）"><a href="#淡入（淡出）" class="headerlink" title="淡入（淡出）"></a>淡入（淡出）</h3><p><code>FFmpeg</code>的音频过滤器可以实现这一效果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ffmpeg -i Input.mp3 -write_xing 0 -af afade=t=<span class="keyword">in</span>:ss=0:d=15 Output.mp3</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python GUI]]></title>
      <url>/2017/09/27/pygui/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>最近的实验需要做一个桌面小程序来收集实验信息，决定选用跨平台的<code>Python</code>来写。<br>在<code>Python图形界面编程</code>中常用的工具包有：</p>
<a id="more"></a>
<ul>
<li><a href="https://www.riverbankcomputing.com/software/pyqt" target="_blank" rel="external">PyQt</a> (Python和Qt库的成功融合)</li>
<li><a href="https://www.wxpython.org/" target="_blank" rel="external">wxPython</a> (wxWidgets的Python封装)</li>
<li><a href="https://wiki.python.org/moin/TkInter/" target="_blank" rel="external">Tkinter</a> (Python的标准GUI工具包)</li>
</ul>
<p>这次使用的是<code>PyQt</code>（相关文档和资料比较多）。</p>
<h2 id="PyQt"><a href="#PyQt" class="headerlink" title="PyQt"></a>PyQt</h2><p>使用Qt开发程序可以从<code>Qt Widgets</code>或/和<code>Qt Quick</code>开始（<a href="http://blog.csdn.net/liang19890820/article/details/54141552" target="_blank" rel="external">Qt Widgets、QML、Qt Quick的区别</a>）。我们对实验工具的界面要求不高，可以直接使用<code>Qt Widgets</code>开发。它有几个重要的概念：</p>
<p>C1. UI 界面实现</p>
<blockquote>
<p>QApplication</p>
<blockquote>
<p>QWidget</p>
</blockquote>
</blockquote>
<p>C2. 组件通信</p>
<blockquote>
<p>Signal &amp; Slot （信号槽机制）</p>
</blockquote>
<h2 id="使用-PyInstaller-打包可执行程序"><a href="#使用-PyInstaller-打包可执行程序" class="headerlink" title="使用 PyInstaller 打包可执行程序"></a>使用 PyInstaller 打包可执行程序</h2><h3 id="注意在打包后系统路径会发生变化"><a href="#注意在打包后系统路径会发生变化" class="headerlink" title="注意在打包后系统路径会发生变化"></a>注意在打包后系统路径会发生变化</h3><p>平时几种常用的获取当前运行脚本路径的方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">print(__file__)</div><div class="line">print(os.path.realpath(__file__))</div><div class="line">print(<span class="string">'using sys.executable:'</span>, repr(os.path.dirname(os.path.realpath(sys.executable))))</div><div class="line">print(<span class="string">'using sys.argv[0]:'</span>, repr(os.path.dirname(os.path.realpath(sys.argv[<span class="number">0</span>]))))</div><div class="line">print(os.path.split(sys.argv[<span class="number">0</span>]))</div><div class="line">print(sys.path[<span class="number">0</span>])</div></pre></td></tr></table></figure>
<p>在工程中的运行结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/Users/huizhang/Desktop/testpath/path.py</div><div class="line">/Users/huizhang/Desktop/testpath/path.py</div><div class="line">using sys.executable: <span class="string">'/usr/local/Cellar/python3/3.6.2/Frameworks/Python.framework/Versions/3.6/bin'</span></div><div class="line">using sys.argv[<span class="number">0</span>]: <span class="string">'/Users/huizhang/Desktop/testpath'</span></div><div class="line">(<span class="string">'/Users/huizhang/Desktop/testpath'</span>, <span class="string">'path.py'</span>)</div><div class="line">/Users/huizhang/Desktop/testpath</div></pre></td></tr></table></figure>
<p>打包后的运行结果：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">path.py</div><div class="line">/Users/huizhang/path.py</div><div class="line">using sys.executable: <span class="string">'/Users/huizhang/Desktop/testpath/dist/path.app/Contents/MacOS'</span></div><div class="line">using sys.argv[0]: <span class="string">'/Users/huizhang/Desktop/testpath/dist/path.app/Contents/MacOS'</span></div><div class="line">(<span class="string">'/Users/huizhang/Desktop/testpath/dist/path.app/Contents/MacOS'</span>, <span class="string">'path'</span>)</div><div class="line">/Users/huizhang/Desktop/testpath/dist/path.app/Contents/MacOS/base_library.zip</div></pre></td></tr></table></figure>
<h3 id="打包数据文件"><a href="#打包数据文件" class="headerlink" title="打包数据文件"></a>打包数据文件</h3><p><code>pyinstaller</code>命令不能直接将工程中的数据文件一起打包，要实现这一步必须修改<code>.spec</code>文件。<a href="http://legendtkl.com/2015/11/06/pyinstaller/" target="_blank" rel="external">legendtkl的博客</a>中有<code>PyInstaller</code>的简介中文教程，也可以直接查看<a href="https://pythonhosted.org/PyInstaller/spec-files.html" target="_blank" rel="external">官方文档</a>。</p>
<p>添加数据文件只需要在<code>a.datas</code>里面添加二元组即可，二元组第一个参数<code>&#39;/mygame/data&#39;</code>是要添加的数据文件的本地索引，第二个参数<code>&#39;data&#39;</code>是在打包后的工程中的位置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">added_files = [</div><div class="line">         ( &apos;/mygame/data&apos;, &apos;data&apos; ),</div><div class="line">         ( &apos;/mygame/sfx/*.mp3&apos;, &apos;sfx&apos; ),</div><div class="line">         ( &apos;src/README.txt&apos;, &apos;.&apos; )</div><div class="line">         ]</div><div class="line">         </div><div class="line">    a = Analysis(...</div><div class="line">         datas = added_files,</div><div class="line">         ...</div><div class="line">         )</div></pre></td></tr></table></figure>
<p><code>PyInstaller</code>会把打包的位置存在<code>sys._MEIPASS</code>，可以测试一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">img = os.path.join(<span class="string">"res"</span>,<span class="string">"img"</span>,<span class="string">"test.jpg"</span>)</div><div class="line"></div><div class="line">base_path0 = os.path.abspath(<span class="string">"."</span>)</div><div class="line">base_path1 = os.path.dirname(os.path.realpath(sys.argv[<span class="number">0</span>]))</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    base_path2 = sys._MEIPASS</div><div class="line"><span class="keyword">except</span> Exception:</div><div class="line">    <span class="comment"># PyInstaller打包前sys._MEIPASS不存在</span></div><div class="line">    base_path2 = os.path.abspath(<span class="string">"."</span>)</div><div class="line"></div><div class="line">print(<span class="string">"img0: "</span>,os.path.join(base_path0,img))</div><div class="line">print(<span class="string">"img1: "</span>,os.path.join(base_path1,img))</div><div class="line">print(<span class="string">"img2: "</span>,os.path.join(base_path2,img))</div></pre></td></tr></table></figure>
<p>工程中的运行结果都一样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 路径都正确</span></div><div class="line">img0:  /Users/huizhang/Desktop/testinstaller/res/img/test.jpg </div><div class="line">img1:  /Users/huizhang/Desktop/testinstaller/res/img/test.jpg</div><div class="line">img2:  /Users/huizhang/Desktop/testinstaller/res/img/test.jpg</div></pre></td></tr></table></figure>
<p>打包后：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># img0错误，img1和img2正确</span></div><div class="line">img0:  /Users/huizhang/res/img/test.jpg </div><div class="line">img1:  /Users/huizhang/Desktop/testinstaller/dist/test.app/Contents/MacOS/res/img/test.jpg</div><div class="line">img2:  /Users/huizhang/Desktop/testinstaller/dist/test.app/Contents/MacOS/res/img/test.jpg</div></pre></td></tr></table></figure>
<h3 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> my_project_dir</div><div class="line"><span class="comment"># -w 参数指定打包为一个文件(.app)，-n 设置应用名，-i 设置应用图标。</span></div><div class="line">pyi-makespec -w -n MyAppName -i appicon.icns MyMainScript.py</div><div class="line"><span class="comment"># 修改.spec文件中的 datas 以添加数据文件</span></div><div class="line">pyinstaller MyAppName.spec</div><div class="line"><span class="comment"># 生成 built 文件夹和 dist 文件夹，打包好的文件在 dist 中。</span></div></pre></td></tr></table></figure>
<h2 id="附：使用PyQt过程中遇到的问题"><a href="#附：使用PyQt过程中遇到的问题" class="headerlink" title="附：使用PyQt过程中遇到的问题"></a>附：使用PyQt过程中遇到的问题</h2><h3 id="QSound不能播放音乐"><a href="#QSound不能播放音乐" class="headerlink" title="QSound不能播放音乐"></a>QSound不能播放音乐</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QSoundEffect(qaudio): Error decoding source</div></pre></td></tr></table></figure>
<p>QSound只能播放<code>.wav</code></p>
<h3 id="QMediaPlayer没有声音"><a href="#QMediaPlayer没有声音" class="headerlink" title="QMediaPlayer没有声音"></a>QMediaPlayer没有声音</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">no error but no sound</div></pre></td></tr></table></figure>
<p>QUrl.fromLocalFile只能使用绝对路径</p>
<h3 id="QMediaPlayer-duration数据错误"><a href="#QMediaPlayer-duration数据错误" class="headerlink" title="QMediaPlayer.duration数据错误"></a>QMediaPlayer.duration数据错误</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QMediaPlayer.duration() == <span class="number">0</span></div></pre></td></tr></table></figure>
<p><code>QMediaPlayer.setMedia()</code>是异步执行的，如果在这个方法后马上调用<code>QMediaPlayer.duration()</code>得到的将是错误的值，因为<code>QMediaPlayer.setMedia()</code>还未设置好。应该在<code>durationchanged</code>信号发出后重新给其赋值。</p>
<h3 id="QMediaPlaylist循环播放"><a href="#QMediaPlaylist循环播放" class="headerlink" title="QMediaPlaylist循环播放"></a>QMediaPlaylist循环播放</h3><p>设置只播一首歌时<code>setPlaybackMode(CurrentItemOnce)</code>，每次本首歌曲播完index会被重置为<code>-1</code>。</p>
]]></content>
      
        
        <tags>
            
            <tag> PyGUI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[推荐系统(Recommender Systems)]]></title>
      <url>/2017/09/11/recsys/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><p>本文使用电影评分推荐的例子来解释两种推荐系统的工作原理，电影推荐的问题可以描述为：<br>已知一些用户对一些电影的评分，预测用户对未评价电影的评分。</p>
<table>
<thead>
<tr>
<th></th>
<th>用户1</th>
<th>用户2</th>
<th>用户3</th>
<th>用户4</th>
</tr>
</thead>
<tbody>
<tr>
<td>电影1</td>
<td>5</td>
<td>5</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>电影2</td>
<td>5</td>
<td>?</td>
<td>?</td>
<td>1</td>
</tr>
<tr>
<td>电影3</td>
<td>?</td>
<td>4</td>
<td>0</td>
<td>?</td>
</tr>
<tr>
<td>电影4</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>5</td>
</tr>
<tr>
<td>电影5</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>?</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>即，已知：</p>
<ol>
<li>\(n_u=\) 用户数量；</li>
<li>\(n_m=\) 电影数量；</li>
<li>\(r(i,j)=1\) 如果用户\(j\)给电影\(i\)打了分，否则为0；</li>
<li>\(y^{(i,j)}=\) 用户\(j\)给电影\(i\)打的分数（只有当\(r(i,j)=1\)时才有定义）；</li>
<li>\(m^{(j)}=\) 用户\(j\)打分了的电影数量；</li>
</ol>
<p>估计：</p>
<ol>
<li>\(\theta^{(j)}=\) 用户\(j\)的参数向量；</li>
<li>\(x^{(i)}=\) 电影\(i\)的特征向量；</li>
<li>对于用户\(j\)，电影\(i\)，预测\((\theta^{(j)})^T(x^{(i)})\)</li>
</ol>
<h2 id="基于内容的推荐系统"><a href="#基于内容的推荐系统" class="headerlink" title="基于内容的推荐系统"></a>基于内容的推荐系统</h2><p>根据已知每个电影的特征\(x^{(i)}\)，学习用户偏好\(\theta^{(1)},…,\theta^{(n_u)}\)，则损失函数为：</p>
<p>$$min_{\theta^{(1)},…,\theta^{(n<em>u)}}\frac{1}{2}\sum</em>{j=1}^{n<em>u}\sum</em>{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{j=1}^{n<em>u}\sum</em>{k=1}^{n}(\theta_k^{(j)})^2$$</p>
<p>梯度下降：</p>
<p>$$\theta_k^{(j)} := \theta<em>k^{(j)} - \alpha\sum</em>{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})x^{(i)}\quad (for\quad k=0 )\ \theta_k^{(j)} := \theta<em>k^{(j)} - \alpha(\sum</em>{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})x^{(i)}+\lambda\theta_k^{(j)}\quad)\quad (for\quad k\neq0 )$$</p>
<h2 id="使用协同过滤的推荐系统"><a href="#使用协同过滤的推荐系统" class="headerlink" title="使用协同过滤的推荐系统"></a>使用协同过滤的推荐系统</h2><p>若我们事先知道各用户的偏好参数 \(\theta^{(j)}\)，则可以学习电影的特征：</p>
<p>$$min_{x^{(1)},…,x^{(n<em>m)}}\frac{1}{2}\sum</em>{i=1}^{n<em>m}\sum</em>{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2+\frac{\lambda}{2}\sum_{i=1}^{n<em>m}\sum</em>{k=1}^{n}(x_k^{(j)})^2$$</p>
<p>那么：<br>给出\(x^{(1)},…,x^{(n_m)}\)和电影评分，可以估计\(\theta^{(1)},…,\theta^{(n_u)}\)；<br>给出\(\theta^{(1)},…,\theta^{(n_u)}\)和电影评分，可以估计\(x^{(1)},…,x^{(n_m)}\)。</p>
<p>这似乎是一个“先有鸡还是先有蛋”的问题，其实我们在解决这个问题时，可以先随机生成 \(\theta\)，然后估计\(x\)，接着根据\(x\)再次估计一组新的\(\theta\)，如此循环最后可以收敛到一组足够合理的结果。</p>
<p>$$ Guess\quad\theta \to x\to\theta\to x\to …$$</p>
<p>以上就是协同过滤的思想。但为了提高计算效率，实际上\(x^{(1)},…,x^{(n_m)}\)和\(\theta^{(1)},…,\theta^{(n_u)}\)是同时考虑的，这样可以将损失函数定义为：</p>
<p>$$J(x^{(1)},…,x^{(n_m)},\theta^{(1)},…,\theta^{(n<em>u)})=\frac{1}{2}\sum</em>{i:r(i,j)=1}((\theta^{(j)})^Tx^{(i)}-y^{(i,j)})^2\+\frac{\lambda}{2}\sum_{i=1}^{n<em>m}\sum</em>{k=1}^{n}(x<em>k^{(j)})^2+\frac{\lambda}{2}\sum</em>{j=1}^{n<em>u}\sum</em>{k=1}^{n}(\theta_k^{(j)})^2$$</p>
<p>协同过滤算法：</p>
<ol>
<li>使用小的随机值初始化\(x^{(1)},…,x^{(n_m)},\theta^{(1)},…,\theta^{(n_u)}\)；</li>
<li>使用梯度下降最小化损失函数\(J(x^{(1)},…,x^{(n_m)},\theta^{(1)},…,\theta^{(n_u)})\)；</li>
<li>对偏好参数为\(\theta\)的用户和特征值为（学习到的）\(x\)的电影，预测其打分\(\theta^Tx\)</li>
</ol>
<blockquote>
<p>此时不再需要截距项：<br>\(x^{(i)}\in \mathbb{R}^n\)<br>\(\theta^{(j)}\in \mathbb{R}^n\)  </p>
</blockquote>
<p>协同过滤算法的向量化实现即低秩矩阵分解(Low Rank Matrix Factorization)的过程。</p>
<h3 id="Mean-Normalization"><a href="#Mean-Normalization" class="headerlink" title="Mean Normalization"></a>Mean Normalization</h3><p>在使用协同过滤算法时应该将打分矩阵均值正规化。因为对于无法得知偏好的新用户(初始化\(\theta^T=[0,0,…]\))，均值正规化可以避免\(\theta\)和\(x\)的最优解都是零矩阵（最后的结果其实就是把其他已知打分的均值赋给了新用户）。</p>
<h3 id="寻找相关电影"><a href="#寻找相关电影" class="headerlink" title="寻找相关电影"></a>寻找相关电影</h3><p>可以根据电影相似性进行推荐：比如对于喜欢电影\(i\)的用户，我们在学习其它电影的特征后将与电影\(i\)最相似的5个电影就是5个最小\(||x^{(i)}-x^{(j)}||\)的电影推荐给这个用户。</p>
]]></content>
      
        <categories>
            
            <category> NG_ML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异常检测(Anomaly Detection)]]></title>
      <url>/2017/09/11/anodet/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<h2 id="使用高斯分布探测异常值"><a href="#使用高斯分布探测异常值" class="headerlink" title="使用高斯分布探测异常值"></a>使用高斯分布探测异常值</h2><p>假设异常特征之间相互独立且\(x_i \sim N(\mu_i,\sigma_i^2)\)，则\(p(x)=\prod{p(x_j;\mu_j,\sigma_j^2)}\)</p>
<ol>
<li>选择标识异常的特征\(x_i\);</li>
<li>学习参数\(\mu_1,…,\mu_n, \sigma_1^2,…,\sigma_n^2\)</li>
<li>对于测试点\(x\)，计算\(p(x)\)，若\(p(x)&lt;\epsilon\)则报异常</li>
</ol>
<p>可使用混淆矩阵评估效果，并使用交叉验证集来选择\(\epsilon\)。</p>
<a id="more"></a>
<h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><p>一般在选定特征之前会使用直方图描绘一下数据特征，看其是否符合高斯分布。<br>对于非高斯分布的特征而言，按照经验来说，可以尝试\(log(x+b)\)或者\(x^{1/b}\)是否满足要求。</p>
<p>在理想情况下，我们希望对于正常点来说\(p(x)\)足够大，而对于异常点来说\(p(x)\)足够小；<br>但是更普遍的情况是\(p(x)\)在正常点和异常点上都很大。在这些情况下我们就要考虑添加更加恰当的特征。<br>例如在机器状态监控中，选用的异常特征有：  </p>
<ol>
<li>\(x_1=\) 内存占用</li>
<li>\(x_2=\) 磁盘访问</li>
<li>\(x_3=\) CPU负载</li>
<li>\(x_4=\) 网络流量</li>
</ol>
<p>但\(x_3, x_4\)在异常情况和非异常情况下都有可能极大或者极小，因此可以考虑添加特征：<br>$$x_5=\frac{CPU负载}{网络流量},\quad x_6=\frac{(CPU负载)^2}{网络流量}$$</p>
<h2 id="异常检测与监督学习"><a href="#异常检测与监督学习" class="headerlink" title="异常检测与监督学习"></a>异常检测与监督学习</h2><table>
<thead>
<tr>
<th>异常检测</th>
<th>监督学习</th>
</tr>
</thead>
<tbody>
<tr>
<td>正例数量非常少(一般0-20)</td>
<td>非常多的正例和负例</td>
</tr>
<tr>
<td>负例数量非常多</td>
<td></td>
</tr>
<tr>
<td>异常值很“多样”，很难根据现有正例数据学习异常特征</td>
<td>有足够的正例以供学习其特征，将来出现的正例很可能与训练集中已有的某些相似</td>
</tr>
<tr>
<td>将来出现的异常可能和现有的异常值完全不同</td>
<td></td>
</tr>
<tr>
<td>举例：</td>
<td></td>
</tr>
<tr>
<td>诈骗检测</td>
<td>垃圾邮件分类</td>
</tr>
<tr>
<td>制造业 (比如飞机引擎)</td>
<td>天气预报 (晴/雨/其它)</td>
</tr>
<tr>
<td>数据中心的机器监控</td>
<td>癌症检测</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> NG_ML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[K-means和PCA]]></title>
      <url>/2017/07/04/ng_cluster/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<h2 id="K-means"><a href="#K-means" class="headerlink" title="K-means"></a>K-means</h2><p><code>K-means</code>是一个常用且有效的聚类算法。它的算法可以描述为：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Firstly randomly initiallize the K centroids mu1,mu2,...,muk;</div><div class="line">Repeat&#123;</div><div class="line">	% Cluster assignment step</div><div class="line">	for i = <span class="number">1</span> to m</div><div class="line">		ci = index of cluster centroid cloest to xi;</div><div class="line">	% Move centroid</div><div class="line">	for k = <span class="number">1</span> to k</div><div class="line">		muk = mean of points xs assigned to cluster k;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h3><p>像逻辑回归等监督学习算法一样，<code>K-means</code>等无监督学习算法同样有损失函数来作为优化目标：</p>
<p>$$min_{c,\mu}J(c^{(1)},…,c^{(m)},\mu_1,…,.\mu<em>K) = \frac{1}{m}||x^{(i)}-\mu</em>{c^{(i)}}||^2$$</p>
<p>\(minJ\)表示我们的优化目标是最小化同类点到聚类中心的距离。</p>
<h3 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h3><p>当\(K\)值较小的时候，初始中心点的位置对最后的聚类结果有非常大的影响。只随机生成一组初始点可能会导致最后的结果是局部最优解<code>local optima</code>。因此，当\(K\)值较小的时候，我们可以使用多组初始中心点以避免这个问题：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> to <span class="number">100</span> &#123;</div><div class="line">	Randomly initialize K-means;</div><div class="line">	Run K-means, get c1,...,cm, mu1,...,muk;</div><div class="line">	Compute cost function/distortion; </div><div class="line">&#125;</div><div class="line"></div><div class="line">Choose the cluster that gave the lowest cost J.</div></pre></td></tr></table></figure>
<h3 id="选择聚类数目"><a href="#选择聚类数目" class="headerlink" title="选择聚类数目"></a>选择聚类数目</h3><p>怎样选择聚类数目\(K\)是一个很难说的问题，有时就算是人类专家在看到一组可视化数据后都很难给出精准的答案。现有的选择\(K\)的算法有<code>ELbow Method</code>，但它对很多情况都并不适用。通常来说，决定\(K\)的大小需要我们根据具体问题和之后的目标来具体分析。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol>
<li>市场分割</li>
<li>社交网络分析</li>
<li>计算集群组织</li>
<li>天文数据分析</li>
</ol>
<h2 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h2><p><code>PCA</code>也是最常用的无监督算法之一，它的算法可以描述为：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> Feature Preprocessing: feature scaling and mean normaliza1on;</div><div class="line"><span class="number">2.</span> Compute covariance matrix:</div><div class="line">	Sigma = <span class="number">1</span>/m * X' * X;</div><div class="line"><span class="number">3.</span> Compute eigenvectors of matrix Sigma:</div><div class="line">	[U,S,V] = svd(Sigma);</div><div class="line"><span class="number">4.</span> Ureduce = U(:,<span class="number">1</span>:k);</div><div class="line"><span class="number">5.</span> Xreduce = X * Ureduce;</div><div class="line"><span class="number">6.</span> Xrecover = Xreduce * Ureduce';</div></pre></td></tr></table></figure>
<h3 id="优化目标-1"><a href="#优化目标-1" class="headerlink" title="优化目标"></a>优化目标</h3><p>PCA的目标可以描述为：要找到最合适的一组向量\(\mu^{(1)},…,\mu^{(k)}\)，将原始数据映射到这组向量围成的新的特征空间中，使其<code>投影距离最小(minimize the projec1on error)</code>。</p>
<h3 id="选择主成分数量"><a href="#选择主成分数量" class="headerlink" title="选择主成分数量"></a>选择主成分数量</h3><p>通常，我们可以用到达一定<code>保留方差(retained variance)</code>的最小\(k\)值来作为主成分数量。可以看一个保留了99%方差的例子：</p>
<p>$$\frac{\frac{1}{m}\sum<em>{i=1}^m||x^{(i)}-x^{(1)}</em>{approx}||^2}{\frac{1}{m}\sum_{i=1}^m||x^{(i)}||^2} \le 0.01 $$</p>
<p>上述值可以通过协方差矩阵奇异值分解后得到的\(S\)来计算，\(S\)是一个对角矩阵，上述不等式等同于：</p>
<p>$$\frac{\sum<em>{i=1}^kS</em>{ii}}{\sum<em>{i=1}^mS</em>{ii}}\ge 0.99$$</p>
<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>应该用于：</p>
<ol>
<li>数据压缩：减小数据储存代价、加快运算速度（\(k&lt;n\)，由保留方差计算）；</li>
<li>数据可视化（\(k=2 \quad or\quad k=3\)）</li>
</ol>
<p>错误的应用：</p>
<ol>
<li>减小特征集以防止过拟合：PCA只分析了特征之间\(x_1,…x_n\)的关系，并没有考虑特征的变化对\(y\)的影响，使用PCA可能会丢失和\(y\)相关的重要信息。因此防止过拟合不应该用PCA，而应该使用正则化。</li>
<li>在机器学习系统的开始设计阶段使用：应该先使用原始数据，只有在原始数据效果不好（太慢之类的）时候再考虑用PCA。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> NG_ML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[支持向量机(SVM)]]></title>
      <url>/2017/06/26/svm/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<h2 id="支持向量机的假设函数和损失函数"><a href="#支持向量机的假设函数和损失函数" class="headerlink" title="支持向量机的假设函数和损失函数"></a>支持向量机的假设函数和损失函数</h2><p>回忆一下逻辑回归的损失函数：</p>
<p>$$min<em>\theta\frac{1}{m}\sum</em>{i=1}^{m}[y^{(i)}(-logh<em>\theta(x^{(i)})+(1-y^{(i)})(-log(1-h</em>\theta(x^{(i)}))]+\frac{\lambda}{2m}\sum_{j=1}^n\theta_j^2$$</p>
<p>支持向量机的损失函数与之类似：</p>
<p>$$min<em>\theta C\sum</em>{i=1}^{m}[y^{(i)}cost_1(\theta^Tx^{(i)})+(1-y^{(i)})cost<em>0(\theta^Tx^{(i)})]+\frac{1}{2}\sum</em>{j=1}^n\theta_j^2$$</p>
<a id="more"></a>
<p>\(cost_{1}(z) \quad (y=1)\)：</p>
<img src="/2017/06/26/svm/cost1.png">
<p>\(cost_{0}(z) \quad (y=0)\)：</p>
<img src="/2017/06/26/svm/cost0.png">
<p>注意到除了从\(-log((1-)\frac{1}{1+e^z})\)到\(cost_{0/1}(z)\)的变化外，用于<code>trade-off</code>的\(\lambda\)也在支持向量机中通常以参数\(C\)的形式出现，\(C\)可以理解为\(\frac{1}{\lambda}\)。</p>
<p>支持向量机的假设函数：</p>
<p>$$\begin{equation}<br>h_\theta(x)=\begin{cases}<br>1 &amp; \text{if}\quad \theta^Tx\ge 0 \<br>0 &amp; \text{otherwise}<br>\end{cases}<br>\end{equation}$$</p>
<h2 id="Large-Margin-Classification"><a href="#Large-Margin-Classification" class="headerlink" title="Large Margin Classification"></a>Large Margin Classification</h2><p>SVM常常被称作为<code>Large Margin Classification</code>，为什么呢？因为它对于决策边界要求更加严格：</p>
<ul>
<li>如果\(y=1\)，我们想要\(\theta^Tx \ge 1\)（而不是\(\ge 0\)）；</li>
<li>如果\(y=0\)，我们想要\(\theta^Tx \le -1\)（而不是\(&lt; 0\)）；</li>
</ul>
<p>当满足以上条件时，\(cost_{0/1}(z)=0\)，从而将\(minJ(\theta)\)转化为以下的凸优化问题：</p>
<p>$$\begin{align}&amp; min<em>\theta\frac{1}{2}\sum</em>{j=1}^{n}\theta_j^2 \<br>&amp; s.t. \begin{cases}<br>\theta^Tx^{(i)}\ge 1 &amp; \text{if} \quad y^{(i)}=1 \<br>\theta^Tx^{(i)}\le -1 &amp; \text{if} \quad y^{(i)}=0<br>\end{cases}<br>\end{align}$$</p>
<p>将\(x^{(i)}\)在向量\(\theta\)上的投影写作\(p^{(i)}\)，可以变化形式为：</p>
<p>$$\begin{align}&amp; min<em>\theta\frac{1}{2}\sum</em>{j=1}^{n}\theta_j^2 \<br>&amp; s.t. \begin{cases}<br>p^{(i)}||\theta||\ge 1 &amp; \text{if} \quad y^{(i)}=1 \<br>p^{(i)}||\theta||\le -1 &amp; \text{if} \quad y^{(i)}=0<br>\end{cases}<br>\end{align}$$</p>
<p>\(\theta\)向量是决策边界\(\theta^Tx=0\)的法向量，为了使\(||\theta||\)（即目标函数）尽量小，在条件限制下，\(p\)就要尽可能大，即\(x\)在\(\theta\)方向的投影尽可能大，这就使得决策边界离两边数据尽可能远。</p>
<p>SVM是凸函数优化，最后的结果是全局最优点，不需要担心局部最优问题。</p>
<h2 id="核函数-Kernels"><a href="#核函数-Kernels" class="headerlink" title="核函数(Kernels)"></a>核函数(Kernels)</h2><p>核函数将一系列特征\(x_1,…x_n\)映射到另一组特征\(f_1,…\)上，可以给SVM加上非线性性质。它有两个重要概念：</p>
<ol>
<li><code>地标点(landmarks)</code>：\(l^{(1)},…,l^{(n)}\)；</li>
<li><code>近似度(Similarity)</code>:<br>$$similarity(x,l)=1\quad \text{if}\quad x\approx l\ \similarity(x,l)=0\quad \text{if (x) is far away form }l$$</li>
</ol>
<p>地标点一般直接使用训练集中的点\(l^{(1)} = x^{(1)},…,l^{(m)} = x^{(m)}\)；<br>常用的近似度函数有:</p>
<ul>
<li><code>线性核函数(linear kernel)</code>：线性核函数其实就是不用核函数，\(f_n = x_n\)；</li>
<li><code>高斯核函数(Gaussian kernel)</code>：\(f_m = similarity(x,l)=exp(-\frac{||x-l^{(m)}||}{2\sigma^2})\)</li>
</ul>
<p>在高斯核函数中，\(\sigma\)也可以起到<code>trade-off</code>的作用：</p>
<ul>
<li>\(\sigma\)过小：高方差、低偏差；</li>
<li>\(\sigma\)过大：高偏差、低方差。</li>
</ul>
<h2 id="使用SVM"><a href="#使用SVM" class="headerlink" title="使用SVM"></a>使用SVM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1. First choose parameter C and kernel;</div><div class="line">2. Given training data: (x1,y1),(x2,y2)...(xm,ym), choose l1=x1,..., lm=xm;</div><div class="line">3. mapping features using similarity:</div><div class="line">	f1 = similarity(x,l1)</div><div class="line">	.</div><div class="line">	.</div><div class="line">	.</div><div class="line">	fm = similarity(x,lm)</div><div class="line"></div><div class="line">4. Feature scaling</div><div class="line">5. traing svm with f, C, sigma(hypotyhesis: predict y=1 if theta*f &gt;= 0)</div></pre></td></tr></table></figure>
<h2 id="逻辑回归和SVM"><a href="#逻辑回归和SVM" class="headerlink" title="逻辑回归和SVM"></a>逻辑回归和SVM</h2><ol>
<li>\(n\)很大（和\(m\)相近）：使用逻辑回归或者不带核函数的（或者线性核函数）的SVM，这两者效果类似，不用复杂的非线性特征以防止过拟合；</li>
<li>\(n\)很小，\(m\)不大不小 (intermediate) ：使用带高斯核的SVM；</li>
<li>\(n\)很小，\(m\)很大：增加特征，然后使用逻辑回归或者不带核函数的SVM。</li>
</ol>
<p>神经网络在以上三种情况下都表现很好，但是训练速度很慢。</p>
]]></content>
      
        <categories>
            
            <category> NG_ML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[提升学习算法性能]]></title>
      <url>/2017/06/20/betterMLA/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>在解决一个机器学习问题时，如果算法效果不理想，要怎么办呢？直觉上，我们可以有一些解决方法：</p>
<ul>
<li>增加训练数据  </li>
<li>减小特征集  </li>
<li>增加特征  </li>
<li>增加多项式特征</li>
<li>减小\(\lambda\)  </li>
<li>变大\(\lambda\)  </li>
<li>…</li>
</ul>
<p>然而，这些方法并不是在所有情况下都适用的，有时候，花很多时间增加训练数据也许根本不能使分类结果变得更好。因此，我们需要使用一些简单的技巧来选择使用哪些方法，这样的技巧被称为<code>机器学习诊断(machine learning diagnostics)</code>。</p>
<a id="more"></a>
<h2 id="评估假设函数"><a href="#评估假设函数" class="headerlink" title="评估假设函数"></a>评估假设函数</h2><p>在解决一个机器学习问题时，我们往往会选择不同的模型来训练学习算法，然后评估比较其效果。那么怎样的评估是正确有效的呢？一个常用的方法是，将数据集分为三部分：  </p>
<ol>
<li>训练集(60%)：使用训练集计算每一个模型的优化参数\(\Theta\)；</li>
<li>交叉验证集(20%)：使用验证集计算每个模型的误差，选出误差最小的模型；</li>
<li>测试集(20%)：使用测试集计算误差最小模型的<code>通用误差(generalization error)</code>。</li>
</ol>
<p>注意：设置交叉验证集的目的是将验证集误差与测试集误差区分开来，使得测试集误差可以作为通用误差的评估依据。我们在选择模型时针对验证集做了优化（因为选的是最小误差的验证集），因此验证集误差是会小于测试集误差的。</p>
<h2 id="机器学习诊断"><a href="#机器学习诊断" class="headerlink" title="机器学习诊断"></a>机器学习诊断</h2><h3 id="诊断高偏差和高方差"><a href="#诊断高偏差和高方差" class="headerlink" title="诊断高偏差和高方差"></a>诊断高偏差和高方差</h3><ul>
<li>高偏差（欠拟合）：\(J<em>{train}(\Theta)\)和\(J</em>{CV}(\Theta)\)都会很大，且\(J<em>{CV}(\Theta) \approx J</em>{train}(\Theta)\)；</li>
<li>高方差（过拟合）：：\(J<em>{train}(\Theta)\)会很小，\(J</em>{CV}(\Theta)\)会远大于\(J_{train}(\Theta)\)。</li>
</ul>
<p>例如下图：</p>
<img src="/2017/06/20/betterMLA/BV.png">
<p>正则化系数\(\lambda\)选择不合理也可能导致欠拟合或者过拟合，因此\(\lambda\)可以和不同模型组合在一起进行实验选择：</p>
<ol>
<li>创建一组\(\lambda\)；</li>
<li>创建一组假设函数；</li>
<li>迭代学习每个\(\lambda\)与假设函数组合的\(\Theta\)；</li>
<li>对每一个\(\Theta\)计算验证集上的错误率（计算错误率不加入正则项）；</li>
<li>选择误差最小的组合；</li>
<li>计算测试集误差来评估它是否有好的通用性。</li>
</ol>
<h3 id="学习曲线-Learning-Curves"><a href="#学习曲线-Learning-Curves" class="headerlink" title="学习曲线(Learning Curves)"></a>学习曲线(Learning Curves)</h3><p>学习曲线是错误率随训练集大小的变化而变化的曲线，可以用来诊断欠拟合和过拟合问题。</p>
<h4 id="在高偏差的时候"><a href="#在高偏差的时候" class="headerlink" title="在高偏差的时候"></a>在高偏差的时候</h4><ul>
<li>训练集小：\(J<em>{train}(\Theta)\)小，\(J</em>{CV}(\Theta)\)大；</li>
<li>训练集大：\(J<em>{train}(\Theta)\)和\(J</em>{CV}(\Theta)\)都很大，且\(J<em>{CV}(\Theta) \approx J</em>{train}(\Theta)\)。</li>
</ul>
<p>当出现高偏差的时候，加大训练集并不能带来多大的帮助：</p>
<img src="/2017/06/20/betterMLA/highB.png">
<h4 id="在高方差的时候"><a href="#在高方差的时候" class="headerlink" title="在高方差的时候"></a>在高方差的时候</h4><ul>
<li>训练集小：\(J<em>{train}(\Theta)\)小，\(J</em>{CV}(\Theta)\)大；</li>
<li>训练集大：\(J<em>{train}(\Theta)\)随着训练集增大而变大，\(J</em>{CV}(\Theta)\)随着训练增大而变小，但不会趋于平缓，且\(J<em>{CV}(\Theta) &lt; J</em>{train}(\Theta)\)并差距依旧明显。</li>
</ul>
<p>当出现高方差的时候，加大训练集可能会提高性能：</p>
<img src="/2017/06/20/betterMLA/highV.png">
<h3 id="处理方法小结"><a href="#处理方法小结" class="headerlink" title="处理方法小结"></a>处理方法小结</h3><ul>
<li>增加训练数据  &lt;– 高方差</li>
<li>减小特征集  &lt;– 高方差</li>
<li>增加特征  &lt;– 高偏差</li>
<li>增加多项式特征 &lt;– 高偏差</li>
<li>减小\(\lambda\)  &lt;– 高偏差</li>
<li>变大\(\lambda\)  &lt;– 高方差</li>
</ul>
<p>特别的，对于神经网络：  </p>
<ul>
<li>较低阶的多项式（模型复杂度低）可能导致高偏差和低方差。在这种情况下，模型拟合结果差；</li>
<li>较高阶的多项式（模型复杂度高）拟合训练集非常好，拟合测试集非常不好，导致训练数据上的低偏差和高方差。</li>
<li>实际上，我们希望达到两者之间的状态，即在拟合数据好的情况下也保证通用性好。</li>
</ul>
<h2 id="一般化流程"><a href="#一般化流程" class="headerlink" title="一般化流程"></a>一般化流程</h2><p>一般来说，解决机器学习问题的推荐方法是：</p>
<ol>
<li>从一个简单的算法开始，快速实现，尽早在验证集上测试看一下效果；</li>
<li>画出学习曲线来决定是否要增加数据、特征等；</li>
<li>进行实验，计算验证集误差，尝试找出大部分错误的来源趋势。</li>
</ol>
<p>在选择使用的特征和模型时，始终要考虑两个问题：<br>Q1. 如果是人类专家来根据这些给出的特征进行预测，Ta能不能做出有效判断？即，使用的特征是否含有足够的有效信息；<br>Q2. 使用的模型是否具有足够的复杂度来解决这个问题？多参数的复杂算法和大的训练数据集相结合可以有效解决高偏差问题，同时不至于带来高方差。</p>
<h2 id="偏态数据-skewed-data"><a href="#偏态数据-skewed-data" class="headerlink" title="偏态数据(skewed data)"></a>偏态数据(skewed data)</h2><p>当训练数据中正负例数量非常不均衡时，比如正例远远少于负例（检测癌症患者的实验中，患病者的数目远远少于未患病者的数目），这样的数据就叫做<code>偏态数据(skewed data)</code>。</p>
<p>在遇到偏态数据时，只使用<code>正确率(accuracy)</code>作为<code>误差评估指标(error metrics)</code>是不合适的，因为这可能会导致明显错误的选择。比如，在诊断是否患该症的问题中始终得到不患病的结果可以得到很高的正确率，但这样的诊断方式是显然不对的。</p>
<p>所以，需要有新的指标来衡量算法效果。常用的有<code>精确度(Precision)</code>和<code>查全率(Recall)</code>。</p>
<p>定义混淆矩阵如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>实际值1</th>
<th>实际值0</th>
</tr>
</thead>
<tbody>
<tr>
<td>分类值1</td>
<td>Ture Positive</td>
<td>False Positive</td>
</tr>
<tr>
<td>分类值0</td>
<td>False Negative</td>
<td>Ture Negative</td>
</tr>
</tbody>
</table>
<p>$$\begin{align} Precision = \frac{True Positive}{Ture Positive + False Positive} \newline \newline Recall = \frac{True Positive}{Ture Positive + False Negative}\end{align}$$</p>
<p>使用精确度和查全率可以有效消除单独使用正确率带来的偏态数据处理不当问题。</p>
<p>但是，这样带来的另一个问题是，有了多个衡量性能的标准。而我们知道，有一个单独的实数作为<code>误差评估指标</code>(A single real number evaluation metric)是非常重要且必要的。同时，为了权衡精确度和查全率（设置分类阈值），可以使用<code>F1 Score</code>来作为误差评估指标：</p>
<p>$$\begin{align} F_1 Score = 2\frac{Precision\times Recall}{Precision+ Recall}\end{align}$$</p>
]]></content>
      
        <categories>
            
            <category> NG_ML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[神经网络(Neural Networks)]]></title>
      <url>/2017/06/15/neuralnetwork/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<h2 id="Why-Neural-Networks"><a href="#Why-Neural-Networks" class="headerlink" title="Why Neural Networks?"></a>Why Neural Networks?</h2><p>当遇到<code>特征数量很大(n is large)</code>的<code>复杂非线性问题</code>时，简单的逻辑回归（加入二次项或三次项）不再适用，因为会导致太多的特征量参与计算（不仅仅是\(x_n, x_n^2,x_n^3\)，还有\(x_i{x_j},x_i^2{x_j}\)等二次项和三次项）—— 带来巨大的计算代价和过拟合问题。</p>
<p>神经网络其实很早就出现了(A pretty old algorithm)，始于80年代，90年代有所衰减而现在又火了起来（计算机计算能力的提升）。神经网络模拟人脑神经的计算机制，在解决许多机器学习问题时有很好的效果。</p>
<p>人脑使用一种学习算法来处理无数不同的问题，这使得我们模拟它的计算机制成为可能。人脑甚至可以学习任何传感数据，这让神经网络成为最有可能实现人工智能的方法。</p>
<a id="more"></a>
<h2 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h2><p>最简单的神经网络表达式：</p>
<p>$$\begin{bmatrix}x_0 \newline x_1 \newline x<em>2 \newline \end{bmatrix}\rightarrow\begin{bmatrix}\ \ \ \newline \end{bmatrix}\rightarrow h</em>\theta(x)$$</p>
<p>这是一个只有2层的神经网络，第1层<code>输入层</code>\(\begin{bmatrix}x_0 \newline x_1 \newline x<em>2 \newline \end{bmatrix}\)和第2层<code>输出层</code>\(h</em>\theta(x)\)。</p>
<p>输入层和输出层之间可以有中间层节点，称为<code>隐藏层(hidden layers)</code>。有一个隐藏层的神经网络可以表示为：</p>
<p>$$\begin{bmatrix}x_0 \newline x_1 \newline x_2 \newline x_3\end{bmatrix}\rightarrow\begin{bmatrix}a_1^{(2)} \newline a_2^{(2)} \newline a<em>3^{(2)} \newline \end{bmatrix}\rightarrow h</em>\theta(x)$$</p>
<p>$$\begin{align}&amp; a_i^{(j)} = \text{“activation” of unit i in layer j} \newline&amp; \Theta^{(j)} = \text{matrix of weights controlling function mapping from layer j to layer j+1}\end{align}$$</p>
<p>每个激活节点的计算方式：</p>
<p>$$\begin{align} a<em>1^{(2)} = g(\Theta</em>{10}^{(1)}x<em>0 + \Theta</em>{11}^{(1)}x<em>1 + \Theta</em>{12}^{(1)}x<em>2 + \Theta</em>{13}^{(1)}x_3) \newline a<em>2^{(2)} = g(\Theta</em>{20}^{(1)}x<em>0 + \Theta</em>{21}^{(1)}x<em>1 + \Theta</em>{22}^{(1)}x<em>2 + \Theta</em>{23}^{(1)}x_3) \newline a<em>3^{(2)} = g(\Theta</em>{30}^{(1)}x<em>0 + \Theta</em>{31}^{(1)}x<em>1 + \Theta</em>{32}^{(1)}x<em>2 + \Theta</em>{33}^{(1)}x<em>3) \newline h</em>\Theta(x) = a<em>1^{(3)} = g(\Theta</em>{10}^{(2)}a<em>0^{(2)} + \Theta</em>{11}^{(2)}a<em>1^{(2)} + \Theta</em>{12}^{(2)}a<em>2^{(2)} + \Theta</em>{13}^{(2)}a_3^{(2)}) \newline \end{align}$$</p>
<p>值得注意的是，如果神经网络在第\(j\)层有\(s<em>j\)个节点，在第\(j+1\)层有\(s</em>{j+1}\)个节点，那么\(\Theta^{(j)}\)的维度会是\(s_{j+1}\times(s_j +1)\)。</p>
<p>增加隐藏层可以解决更多的复杂非线性问题。</p>
<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><h3 id="二元逻辑运算"><a href="#二元逻辑运算" class="headerlink" title="二元逻辑运算"></a>二元逻辑运算</h3><p>神经网络可以实现所有的逻辑门，例如：</p>
<p>$$\begin{align}AND:\newline\Theta^{(1)} &amp;=\begin{bmatrix}-30 &amp; 20 &amp; 20\end{bmatrix} \newline NOR:\newline\Theta^{(1)} &amp;= \begin{bmatrix}10 &amp; -20 &amp; -20\end{bmatrix} \newline OR:\newline\Theta^{(1)} &amp;= \begin{bmatrix}-10 &amp; 20 &amp; 20\end{bmatrix} \newline\end{align}$$</p>
<h3 id="多类分类"><a href="#多类分类" class="headerlink" title="多类分类"></a>多类分类</h3><p>比如将数据分为4类，表达式可以是：</p>
<p>$$\begin{bmatrix}x_0 \newline x_1 \newline x_2 \newline … \newline x_n\end{bmatrix}\rightarrow\begin{bmatrix}a_0^{(2)} \newline a_1^{(2)} \newline a_2^{(2)} \newline … \newline \end{bmatrix}\rightarrow\begin{bmatrix}a_0^{(3)} \newline a_1^{(3)} \newline a<em>2^{(3)} \newline …\newline \end{bmatrix}\rightarrow … \rightarrow \begin{bmatrix}h</em>\Theta(x)<em>1 \newline h</em>\Theta(x)<em>2 \newline h</em>\Theta(x)<em>3 \newline h</em>\Theta(x)_4\end{bmatrix}$$</p>
<p>分别训练4个假设函数，表示每个分类的可能性，取可能性最大的标签为分类结果。</p>
<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>神经网络的损失函数标准形式：<br>$$\begin{gather} J(\Theta) = - \frac{1}{m} \sum<em>{i=1}^m \sum</em>{k=1}^K \left[y^{(i)}<em>k \log ((h</em>\Theta (x^{(i)}))_k) + (1 - y^{(i)}<em>k)\log (1 - (h</em>\Theta(x^{(i)}))<em>k)\right] + \frac{\lambda}{2m}\sum</em>{l=1}^{L-1} \sum_{i=1}^{s<em>l} \sum</em>{j=1}^{s<em>{l+1}} ( \Theta</em>{j,i}^{(l)})^2\end{gather}$$</p>
<p>$$\begin{align}&amp; L = \text{ total number of layers in the network} \newline&amp; s_l = \text{number of units (not counting bias unit) in layer (l)}\newline&amp; K = \text{number of output units/classes}\end{align}$$</p>
<p>注意，第\(l\)层的\(\Theta^{(l)}\)矩阵大小为\(s_{l+1}\times (s<em>l + 1)\)，因此正则项\(\sum</em>{l=1}^{L-1} \sum_{i=1}^{s<em>l} \sum</em>{j=1}^{s<em>{l+1}} ( \Theta</em>{j,i}^{(l)})^2\)是除去截距项(\(\Theta^{(l)}\)第一列)的所有\(\theta\)的平方和。</p>
<p>这个损失函数\(J(\Theta)\)是非凸的，因此使用梯度下降可能只能得到局部最优值。</p>
<h2 id="反向传播-Backprogation"><a href="#反向传播-Backprogation" class="headerlink" title="反向传播(Backprogation)"></a>反向传播(Backprogation)</h2><p><code>反向传播算法</code>是用于计算损失函数偏导\(\dfrac{\partial}{\partial \Theta_{i,j}^{(l)}}J(\Theta)\)的算法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Given training set &#123;(x(1),y(1))⋯(x(m),y(m))&#125;, set Δ(l)i,j := 0 for all (l,i,j), (hence you end up having a matrix full of zeros)</div><div class="line"></div><div class="line">For training example t =1 to m:</div><div class="line">1. Set a(1) := x(t)</div><div class="line">2. Perform forward propagation to compute a(l) for l=2,3,…,L</div><div class="line">3. Using y(t), compute delta(L) = a(L)−y(t)</div><div class="line">4. Compute delta(L−1),delta(L−2),…,delta(2) using delta(l) = ((Θ(l))&apos;delta(l+1)) .∗ a(l) .∗ (1−a(l))</div><div class="line">5. Delta(l):= Delta(l)+ delta(l+1)(a(l))&apos;</div><div class="line">6. Regularization as the following equation.</div></pre></td></tr></table></figure>
<p>$$\begin{align}&amp; D<em>{i,j}^{(l)} = \frac{1}{m}(\Delta</em>{i,j}^{(l)} + \lambda \Theta<em>{i,j}^{(l)}) \quad \text{if (j \neq 0)}\newline&amp;  D</em>{i,j}^{(l)} = \frac{1}{m}\Delta_{i,j}^{(l)} \quad \text{if (j = 0)}\end{align}$$</p>
<p>最后得到的\(D<em>{i,j}^{(l)}\)即要求的偏导\(\dfrac{\partial}{\partial \Theta</em>{i,j}^{(l)}}J(\Theta)\)。</p>
<p>可以使用<code>梯度检查(Gradient Checking)</code>来检查反向传播算法实现得是否正确。其依据：<br>$$\dfrac{\partial}{\partial\Theta}J(\Theta) \approx \dfrac{J(\Theta + \epsilon) - J(\Theta - \epsilon)}{2\epsilon}$$</p>
<p>对于每一个\(\Theta^{(j)}\)即：</p>
<p>$$\dfrac{\partial}{\partial\Theta_j}J(\Theta) \approx \dfrac{J(\Theta_1, \dots, \Theta_j + \epsilon, \dots, \Theta_n) - J(\Theta_1, \dots, \Theta_j - \epsilon, \dots, \Theta_n)}{2\epsilon}$$</p>
<p>当\(\epsilon = 10^{-4} \)时，可以保证其数学意义（足够小），再小的话计算机在计算的时候会出现数值错误，梯度检查的MATLAB实现：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">epsilon = <span class="number">1e-4</span>;</div><div class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n,</div><div class="line">  thetaPlus = theta;</div><div class="line">  thetaPlus(<span class="built_in">i</span>) += epsilon;</div><div class="line">  thetaMinus = theta;</div><div class="line">  thetaMinus(<span class="built_in">i</span>) -= epsilon;</div><div class="line">  gradApprox(<span class="built_in">i</span>) = (J(thetaPlus) - J(thetaMinus))/(<span class="number">2</span>*epsilon)</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<h2 id="神经网络的使用和训练"><a href="#神经网络的使用和训练" class="headerlink" title="神经网络的使用和训练"></a>神经网络的使用和训练</h2><h3 id="神经网络的结构"><a href="#神经网络的结构" class="headerlink" title="神经网络的结构"></a>神经网络的结构</h3><p>在准备使用神经网络来解决问题时，首先要设计神经网络的结构，包括有多少层隐藏层以及每层有多少节点：</p>
<ol>
<li>输入层节点数，即特征\(x^{(i)}\)的维度；</li>
<li>输出层节点数，即分类的类数；</li>
<li>隐藏层数目和每层的节点数，通常越多越好，但必须平衡随之增加的计算代价；</li>
<li>默认原则：1个隐藏层，如果有1个以上的隐藏层，那么建议每层的节点数一样。</li>
</ol>
<h3 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h3><ol>
<li>随机生成每层的\(\Theta^{(l)}\)；</li>
<li>使用正向传播算出每个训练数据\(x^{(i)}\)的预测值\(h_{\Theta}(x^{(i)})\)；</li>
<li>实现损失函数；</li>
<li>使用反向传播算法实现损失函数偏导计算；</li>
<li>使用梯度检查确保反向传播算法正确实现；</li>
<li>使用梯度下降或其他优化算法来最小化损失函数，得到最终的\(\Theta^{(l)}\)值。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> NG_ML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[逻辑回归(Logistic Regression)]]></title>
      <url>/2017/06/03/logisticreg/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<h2 id="分类表达式"><a href="#分类表达式" class="headerlink" title="分类表达式"></a>分类表达式</h2><h3 id="分类和回归"><a href="#分类和回归" class="headerlink" title="分类和回归"></a>分类和回归</h3><ul>
<li>分类问题和回归问题的形式是相似的，但它的预测值是一组有限的离散值。  </li>
<li>分类问题的求解可以看做是找边界线（面）的过程，即拟合边界曲线（面），特征空间内的点分布在该曲线（面）分割出来的不同子空间中；  </li>
<li>而回归问题的求解是拟合特征-预测值曲线（面），特征空间内的点分布在该曲线（面）上或者附近。</li>
</ul>
<h3 id="分类问题的假设表达式"><a href="#分类问题的假设表达式" class="headerlink" title="分类问题的假设表达式"></a>分类问题的假设表达式</h3><h4 id="逻辑函数-Logistic-Function-or-Sigmoid-Function"><a href="#逻辑函数-Logistic-Function-or-Sigmoid-Function" class="headerlink" title="逻辑函数(Logistic Function or Sigmoid Function)"></a>逻辑函数(Logistic Function or Sigmoid Function)</h4><p>使用逻辑函数\(g(z)\)将预测值映射到[0, 1]区间中，使假设函数更适用于分类问题。</p>
<p>$$\begin{align}&amp;<br>h_\theta (x) = g ( \theta^T x )<br>\newline<br>\newline&amp; z = \theta^T x<br>\newline&amp; g(z) = \dfrac{1}{1 + e^{-z}}<br>\end{align}$$</p>
<a id="more"></a>
<p>逻辑函数和输入值：</p>
<img src="/2017/06/03/logisticreg/sigmoid.png">
<p>可以注意到：</p>
<p>$$\begin{align}z=0, e^{0}=1 \Rightarrow g(z)=1/2\newline z \to \infty, e^{-\infty} \to 0 \Rightarrow g(z)=1 \newline z \to -\infty, e^{\infty}\to \infty \Rightarrow g(z)=0 \end{align}$$</p>
<h4 id="假设函数的物理意义"><a href="#假设函数的物理意义" class="headerlink" title="假设函数的物理意义"></a>假设函数的物理意义</h4><p>\(h_{\theta}(x)\)表示预测值等于1的可能性：</p>
<p>$$\begin{align}&amp;<br>h_\theta(x) = P(y=1 | x ; \theta) = 1 - P(y=0 | x ; \theta)<br>\newline&amp; P(y = 0 | x;\theta) + P(y = 1 | x ; \theta) = 1<br>\end{align}$$</p>
<h3 id="判定边界-Decision-Boundary"><a href="#判定边界-Decision-Boundary" class="headerlink" title="判定边界(Decision Boundary)"></a>判定边界(Decision Boundary)</h3><p>判定边界是指分隔开不同类特征点的曲线（面），它由\(h_{\theta}(x)\)假设函数决定。<br>例如下面这个例子（二分类）中，判定边界是直线\(x_1=5\)</p>
<p>$$\begin{align}&amp; \theta = \begin{bmatrix}5 \newline -1 \newline 0\end{bmatrix} \newline &amp; y = 1 \; if \; 5 + (-1) x_1 + 0 x_2 \geq 0 \newline &amp; 5 - x_1 \geq 0 \newline &amp; - x_1 \geq -5 \newline&amp; x_1 \leq 5 \newline \end{align}$$</p>
<p>注意逻辑函数(\(e.g. \theta^Tx\))的输入不一定是线性的，它可以是任何适合训练数据的形状，比如圆(\(e.g. z =\theta_0+\theta_1x_1^2+\theta_2x_2^2\))。</p>
<h2 id="逻辑回归模型"><a href="#逻辑回归模型" class="headerlink" title="逻辑回归模型"></a>逻辑回归模型</h2><h3 id="损失函数和梯度下降"><a href="#损失函数和梯度下降" class="headerlink" title="损失函数和梯度下降"></a>损失函数和梯度下降</h3><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p>不能直接使用之前线性回归中使用的损失函数\(J(\theta)=\frac{1}{2m}\sum<em>{i=0}^{i=m}(h</em>{\theta}(x_i)-y_i)^2\)，使用逻辑函数会导致其发生扭曲，产生许多局部最优点（极小值），换句话说就不再是凸函数了。<br>所以将损失函数修改为：</p>
<p>$$\begin{align}&amp; J(\theta) = \dfrac{1}{m} \sum<em>{i=1}^m \mathrm{Cost}(h</em>\theta(x^{(i)}),y^{(i)}) \newline &amp; \mathrm{Cost}(h<em>\theta(x),y) = -\log(h</em>\theta(x)) \; &amp; \text{if y = 1} \newline &amp; \mathrm{Cost}(h<em>\theta(x),y) = -\log(1-h</em>\theta(x)) \; &amp; \text{if y = 0}\end{align}$$</p>
<p>即：</p>
<p>$$J(\theta) = - \frac{1}{m} \displaystyle \sum<em>{i=1}^m [y^{(i)}\log (h</em>\theta (x^{(i)})) + (1 - y^{(i)})\log (1 - h_\theta(x^{(i)}))]$$</p>
<p>向量形式为：</p>
<p>$$\begin{align} &amp; h = g(X\theta)\newline &amp; J(\theta) = \frac{1}{m} \cdot \left(-y^{T}\log(h)-(1-y)^{T}\log(1-h)\right) \end{align}$$</p>
<h4 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h4><p>梯度下降的标准形式：</p>
<p>$$\begin{align}&amp; Repeat \; \lbrace \newline &amp; \; \theta_j := \theta_j - \alpha \dfrac{\partial}{\partial \theta_j}J(\theta) \newline &amp; \rbrace\end{align}$$</p>
<p>代入以上\(J(\theta)\)得到：</p>
<p>$$\begin{align} &amp; Repeat \; \lbrace \newline &amp; \; \theta_j := \theta<em>j - \frac{\alpha}{m} \sum</em>{i=1}^m (h_\theta(x^{(i)}) - y^{(i)}) x_j^{(i)} \newline &amp; \rbrace \end{align}$$</p>
<p>向量形式为：</p>
<p>$$\theta := \theta - \frac{\alpha}{m} X^{T} (g(X \theta ) - \vec{y})$$</p>
<h4 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h4><p><code>Conjugate gradient</code>、 <code>BFGS</code>和<code>L-BFG</code>是梯度下降的优化算法，MATLAB有提供这几个库函数，使用这几个函数同样需要定义\(J(\theta)\)和\(\dfrac{\partial}{\partial \theta_j}J(\theta)\)。</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[jVal, gradient]</span> = <span class="title">costFunction</span><span class="params">(theta)</span></span></div><div class="line">  jVal = [...code to compute J(theta)...];</div><div class="line">  gradient = [...code to compute derivative of J(theta)...];</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>MATLAB提供了<code>fminunc()</code>函数来实现优化：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">options = optimset(<span class="string">'GradObj'</span>, <span class="string">'on'</span>, <span class="string">'MaxIter'</span>, <span class="number">100</span>);</div><div class="line">initialTheta = <span class="built_in">zeros</span>(<span class="number">2</span>,<span class="number">1</span>);</div><div class="line">   [optTheta, functionVal, exitFlag] = fminunc(@costFunction, initialTheta, options);</div></pre></td></tr></table></figure>
<h2 id="过拟合-Overfitting-和正则化-Regularization"><a href="#过拟合-Overfitting-和正则化-Regularization" class="headerlink" title="过拟合(Overfitting)和正则化(Regularization)"></a>过拟合(Overfitting)和正则化(Regularization)</h2><p><code>欠拟合(underfitting)</code>或<code>高偏差(high bias)</code>，是指假设函数不足以描述数据趋势，通常由假设函数过于简单或者特征维数太少导致；<br><code>过拟合(overfitting)</code>或<code>高方差(high variance)</code>，是指假设函数对训练集拟合良好但对测试集的通用性差，通常由于假设函数过于复杂或特征维数太高。</p>
<p>解决过拟合问题的常用方法：</p>
<ol>
<li>减少特征维数：手动选择特征、使用模型选择算法；</li>
<li><code>正则化(Regularization)</code>：保留所有特征，但减小参数\(\theta_j\)的量级；正则化在有许多弱相关特征(slightly useful features)的时候很有用。</li>
</ol>
<h3 id="线性回归的正则化"><a href="#线性回归的正则化" class="headerlink" title="线性回归的正则化"></a>线性回归的正则化</h3><h4 id="损失函数正则化"><a href="#损失函数正则化" class="headerlink" title="损失函数正则化"></a>损失函数正则化</h4><p>正则化其实就是通过增加参数在损失函数中的影响来减弱其最后在假设函数中的权重：<br>例如，对于假设函数\(\theta_0 + \theta_1x + \theta_2x^2 + \theta_3x^3 + \theta_4x^4\)，如果想让它变得更加“二次方”，即排除\(\theta_3x^3 \)和\(\theta_4x^4\)的影响，可以通过修改损失函数来实现：</p>
<p>$$min<em>\theta\ \dfrac{1}{2m}\sum</em>{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})^2 + 1000\cdot\theta_3^2 + 1000\cdot\theta_4^2$$</p>
<p>正则化所有参数（除了\(\theta_0\)）：</p>
<p>$$min<em>\theta\ \dfrac{1}{2m}\  \sum</em>{i=1}^m (h<em>\theta(x^{(i)}) - y^{(i)})^2 + \lambda\ \sum</em>{j=1}^n \theta_j^2$$</p>
<p>其中\(\lambda\)是<code>正则化系数(regularization parameter)</code>，\(\lambda\)越大，拟合曲线越平滑，但要注意的是\(\lambda\)过大可能导致欠拟合。</p>
<h4 id="梯度下降正则化"><a href="#梯度下降正则化" class="headerlink" title="梯度下降正则化"></a>梯度下降正则化</h4><p>对于线性回归而言，正则化后的梯度下降：</p>
<p>$$\begin{align} &amp; \text{Repeat}\ \lbrace \newline &amp; \ \ \ \ \theta_0 := \theta<em>0 - \alpha\ \frac{1}{m}\ \sum</em>{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} \newline &amp; \ \ \ \ \theta_j := \theta<em>j - \alpha\ \left[ \left( \frac{1}{m}\ \sum</em>{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} \right) + \frac{\lambda}{m}\theta_j \right] &amp;\ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2…n\rbrace\newline &amp; \rbrace \end{align}$$ </p>
<h4 id="法方程正则化"><a href="#法方程正则化" class="headerlink" title="法方程正则化"></a>法方程正则化</h4><p>正则化后的法方程可以写为：</p>
<p>$$\begin{align}&amp; \theta = \left( X^TX + \lambda \cdot L \right)^{-1} X^Ty \newline&amp; \text{where}\ \ L = \begin{bmatrix} 0 &amp; &amp; &amp; &amp; \newline &amp; 1 &amp; &amp; &amp; \newline &amp; &amp; 1 &amp; &amp; \newline &amp; &amp; &amp; \ddots &amp; \newline &amp; &amp; &amp; &amp; 1 \newline\end{bmatrix}\end{align}$$</p>
<p>要注意梯度下降中的下标\(j\)是从1开始的，同样，法方程中\(\lambda(1,1)=0\)，这是因为截取项\(\theta_0\)是不需要正则化的。</p>
<h3 id="逻辑回归的正则化"><a href="#逻辑回归的正则化" class="headerlink" title="逻辑回归的正则化"></a>逻辑回归的正则化</h3><h4 id="正则化后的损失函数"><a href="#正则化后的损失函数" class="headerlink" title="正则化后的损失函数"></a>正则化后的损失函数</h4><p>逻辑回归的损失函数加上正则化项：</p>
<p>$$J(\theta) = - \frac{1}{m} \sum<em>{i=1}^m [ y^{(i)}\ \log (h</em>\theta (x^{(i)})) + (1 - y^{(i)})\ \log (1 - h<em>\theta(x^{(i)}))] + \frac{\lambda}{2m}\sum</em>{j=1}^n \theta_j^2$$</p>
<p>注意\(\sum_{j=1}^n \theta_j^2\)下标从1开始，在梯度下降中也要特别注意\(\theta_0\)的更新。</p>
<h4 id="正则化后的梯度下降"><a href="#正则化后的梯度下降" class="headerlink" title="正则化后的梯度下降"></a>正则化后的梯度下降</h4><p>$$\begin{align} &amp; \text{Repeat}\ \lbrace \newline &amp; \ \ \ \ \theta_0 := \theta<em>0 - \alpha\ \frac{1}{m}\ \sum</em>{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} \newline &amp; \ \ \ \ \theta_j := \theta<em>j - \alpha\ \left[ \left( \frac{1}{m}\ \sum</em>{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} \right) + \frac{\lambda}{m}\theta_j \right] &amp;\ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2…n\rbrace\newline &amp; \rbrace \end{align}$$ </p>
<h2 id="多值分类"><a href="#多值分类" class="headerlink" title="多值分类"></a>多值分类</h2><p>当预测分类值有多个，如\(y={0,1,2,…,n}\)时，可以将其看做\(n+1\)个二值分类问题：对于每一类，将其看做一类而其他所有的看做一类。</p>
<p>$$\begin{align}&amp; y \in \lbrace0, 1 … n\rbrace \newline&amp; h<em>\theta^{(0)}(x) = P(y = 0 | x ; \theta) \newline&amp; h</em>\theta^{(1)}(x) = P(y = 1 | x ; \theta) \newline&amp; \cdots \newline&amp; h_\theta^{(n)}(x) = P(y = n | x ; \theta) \newline&amp; \mathrm{prediction} = \max<em>i( h</em>\theta ^{(i)}(x) )\newline\end{align}$$</p>
<ol>
<li>训练时，对每一类做二值逻辑回归分类器训练；</li>
<li>预测时，计算每类的预测值，最大的为结果。</li>
</ol>
<p>举个例子（3值分类）：</p>
<img src="/2017/06/03/logisticreg/3classes.png">
]]></content>
      
        <categories>
            
            <category> NG_ML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多变量线性回归]]></title>
      <url>/2017/06/03/multilinear/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>


<h2 id="多变量线性回归假设函数"><a href="#多变量线性回归假设函数" class="headerlink" title="多变量线性回归假设函数"></a>多变量线性回归假设函数</h2><p>多变量假设函数的标准形式(multivariable hypothesis function)  </p>
<p>$$<br>\begin{align}h_\theta(x) =\begin{bmatrix}\theta_0 \hspace{2em} \theta_1 \hspace{2em} … \hspace{2em} \theta_n\end{bmatrix}\begin{bmatrix}x_0 \newline x_1 \newline \vdots \newline x_n\end{bmatrix}= \theta^T x\end{align}<br>$$</p>
<a id="more"></a>
<h2 id="多变量的梯度下降"><a href="#多变量的梯度下降" class="headerlink" title="多变量的梯度下降"></a>多变量的梯度下降</h2><p>$$<br>\begin{align}&amp; \text{Repeat until convergence:} \; \lbrace \newline \; &amp; \theta_j := \theta<em>j - \alpha \frac{1}{m} \sum\limits</em>{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)} \; &amp; \text{for j := 0…n}\newline \rbrace\end{align}<br>$$</p>
<ul>
<li><code>特征缩放(Feature Scaling)</code>和<code>均值正规化(mean normalization)</code>可以加快梯度下降的速度（缩小范围，减少迭代次数）。</li>
</ul>
<p>$$<br>x_i := \dfrac{x_i - \mu_i}{s_i}<br>$$</p>
<ul>
<li><code>学习速率(Learning Rate)</code>：现已证明，如果学习速率\(\alpha\)充分小，则损失函数\(J(\theta)\)会（单调递减）随着迭代次数的增加而减小。总之<code>阈值(threshold)</code>很难确定。<br>若\(\alpha\)太小，则收敛速度慢；<br>若\(\alpha\)太大，则损失函数可能不单调递减而不收敛。</li>
</ul>
<h3 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h3><p>多元函数和多项式函数的转换：</p>
<p>$$<br>h_\theta(x) = \theta_0 + \theta_1 x_1 + \theta_2 x_1^2 + \theta_3 x_1^3<br>$$</p>
<p>可转换为</p>
<p>$$<br>h_\theta(x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2 + \theta_3 x_3<br>$$</p>
<p>即\(x_2 = x_1^2, x_3 = x_1^3\)，此时需要特别注意的是<code>featrue scaling</code>：如果\(x_1\)取值[1,1000]，那么\(x_2\)的取值范围将是[1,1000000]，\(x_3\)则是[1,1000000000]。</p>
<h2 id="使用法方程-Normal-Equation-进行参数计算"><a href="#使用法方程-Normal-Equation-进行参数计算" class="headerlink" title="使用法方程(Normal Equation)进行参数计算"></a>使用法方程(Normal Equation)进行参数计算</h2><p>线性回归的法方程：</p>
<p>$$<br>\theta = (X^T X)^{-1}X^T y<br>$$</p>
<p>注意，法方程中的\(X\)维数是\(m\times (n+1)\)，因为加了一列全是1的列向量以保存\(\theta_0\)，即<code>截距项(intercept term)</code>。</p>
<table>
<thead>
<tr>
<th>梯度下降</th>
<th>法方程</th>
</tr>
</thead>
<tbody>
<tr>
<td>需要选择\(\alpha\)</td>
<td>无需选择\(\alpha\)</td>
</tr>
<tr>
<td>需要迭代</td>
<td>无需迭代</td>
</tr>
<tr>
<td>\(O(kn^2)\)（\(k\)是迭代次数）</td>
<td>\(O(n^3)\)（矩阵求逆具有三次方的复杂度）</td>
</tr>
<tr>
<td>特征数量\(n\)很大的时候效果很好</td>
<td>\(n\)很大的时候非常慢(&lt;10000)</td>
</tr>
</tbody>
</table>
<h3 id="法方程不可逆"><a href="#法方程不可逆" class="headerlink" title="法方程不可逆"></a>法方程不可逆</h3><p>法方程有解的充分条件是\(X^TX\)可逆，而一些常见的因素可能会导致其不可逆：</p>
<ol>
<li>冗余特征(Redundant features)，即可能有多个特征强相关（线性相关）–&gt; 删除相关特征</li>
<li>过多特征 (e.g. m ≤ n)，即特征数量超过样本数量 –&gt; 减少特征</li>
</ol>
]]></content>
      
        <categories>
            
            <category> NG_ML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[交叉数据集和交叉文化下的音乐情感识别]]></title>
      <url>/2017/05/31/crossregression/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>本文是作者在阅读<em>Cross-dataset and Cross-cultural Music Mood Prediction: A Case on Western and Chinese Pop Songs</em>这篇论文后的阅读笔记和总结感想。</p>
<a id="more"></a>
<h2 id="研究概述"><a href="#研究概述" class="headerlink" title="研究概述"></a>研究概述</h2><p>很少有人研究情感回归模型在交叉数据集中的泛化能力（generalizability），或者说通用性，尤其是跨文化的音乐情感研究就更少了。<em>Hu X</em>和<em>Yang Y H</em>提取了3个不同文化背景流行音乐数据集的5种音乐情感特征集，评估了它们训练的情感回归模型的性能，特别是在交叉数据集上的适用性。</p>
<p>他们还设计进行了5个实验来探究<code>数据集大小</code>、<code>标记可靠性</code>、<code>音乐文化背景</code>和<code>注释者文化背景</code>对情感回归模型的<code>性能(performances)</code>以及<code>泛化能力(generalizability)</code>的影响。</p>
<p>整个研究回答了两个问题:</p>
<ol>
<li>哪种声学特征对音乐情感回归影响最大？在单一数据集内或者交叉数据集的情况下一样吗？</li>
<li>使用一个数据集训练的情感回归模型适用于另一个数据集吗？数据集的大小、标记可靠程度和文化背景如何影响模型在交叉数据集下的泛化能力。</li>
</ol>
<h2 id="实验材料"><a href="#实验材料" class="headerlink" title="实验材料"></a>实验材料</h2><h3 id="3个不同文化背景下的流行音乐数据集"><a href="#3个不同文化背景下的流行音乐数据集" class="headerlink" title="3个不同文化背景下的流行音乐数据集"></a>3个不同文化背景下的流行音乐数据集</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th>MER60</th>
<th>CH818</th>
<th>AMG1608</th>
</tr>
</thead>
<tbody>
<tr>
<td>Music</td>
<td>Format</td>
<td>Audio (mp3)</td>
<td>Audio (mp3)</td>
<td>Audio (mp3)</td>
</tr>
<tr>
<td></td>
<td>Size</td>
<td>60</td>
<td>818</td>
<td>1608</td>
</tr>
<tr>
<td></td>
<td>Culture</td>
<td>Western</td>
<td>Chinese</td>
<td>Western</td>
</tr>
<tr>
<td></td>
<td>Length</td>
<td>30 seconds</td>
<td>30 seconds</td>
<td>30 seconds</td>
</tr>
<tr>
<td></td>
<td>Segment selection</td>
<td><code>Chorus part</code>; <code>manual selected</code></td>
<td><code>Segment with the strongest emotion</code></td>
<td>Audio previews from 7 digital</td>
</tr>
<tr>
<td>Annotators</td>
<td>Type</td>
<td>Volunteers</td>
<td><code>Experts</code></td>
<td>MTurk workers</td>
</tr>
<tr>
<td></td>
<td>Culture</td>
<td>Chinese</td>
<td>Chinese</td>
<td>Western</td>
</tr>
<tr>
<td></td>
<td>Number</td>
<td>40 per clip</td>
<td>3 per clip</td>
<td>15–32 per clip</td>
</tr>
<tr>
<td></td>
<td>Scale</td>
<td>Continuous [-5, 5]</td>
<td>Continuous [-10, 10]</td>
<td>Continuous [-1, 1]</td>
</tr>
<tr>
<td>Annotations</td>
<td>Dimensions</td>
<td>V.A.</td>
<td>V.A.</td>
<td>V.A.</td>
</tr>
<tr>
<td></td>
<td>Interface</td>
<td>2-D interactive interface</td>
<td>two separate sliding bars</td>
<td>2-D interactive interface</td>
</tr>
<tr>
<td></td>
<td>Emotion</td>
<td>Intended</td>
<td>Intended</td>
<td>Intended</td>
</tr>
<tr>
<td></td>
<td>\(\alpha\)</td>
<td>V: 0.387; A: 0.704</td>
<td>V: 0.491; A: 0.617</td>
<td>V: 0.306; A: 0.458</td>
</tr>
</tbody>
</table>
<ul>
<li>其中，\(\alpha\)是指<code>Krippendorff’s alpha</code>，用以量化标记可靠性；</li>
<li>CH818使用回归模型自动识别提取了情感最为强烈\((|valence|^2+|arousal|^2)\)的30秒；</li>
<li>CH818用<code>Pearson相关系数</code>表明了3个专家的打分是合理的（和均值非常接近）；</li>
<li>AMG1608的每10个音乐片段中有1个复制，如果复制的音乐片段打分误差超过10%，该注释者的打分数据将会被删除。</li>
</ul>
<h3 id="5种声学特征（15个特征集合）"><a href="#5种声学特征（15个特征集合）" class="headerlink" title="5种声学特征（15个特征集合）"></a>5种声学特征（15个特征集合）</h3><img src="/2017/05/31/crossregression/features.png">
<h3 id="1个回归算法"><a href="#1个回归算法" class="headerlink" title="1个回归算法"></a>1个回归算法</h3><ul>
<li><code>Support Vector Regression(SVR)</code>模型 </li>
<li>使用<code>径向基函数(RBF)</code>作为核函数</li>
<li>通过<code>网格搜索</code>优化参数C和gamma</li>
</ul>
<h2 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h2><p>首先，分别在2个维度下，评估15个单一数据集在9个数据集组合上（3个单一数据集，6个交叉数据集）的回归表现，用<code>step-wise forward feature selection algorithm</code>（一种贪婪算法，用局部最优近似全局最优）来选择特征集组合。</p>
<p>使用上述步骤中选择的特征进行5个实验：</p>
<img src="/2017/05/31/crossregression/experiments.png">
<ul>
<li>实验1用以表明融合特征集比单一特征集效果有所提升；</li>
<li>实验2控制数据集大小，与实验1比较以验证数据集大小对预测能力的影响；</li>
<li>实验3控制训练集标记的可靠程度，与实验2比较以验证训练集标记可靠性对预测能力的影响；</li>
<li>实验4控制训练集和测试集的标记可靠性，与实验3比较以验证测试集标记可靠性对预测能力的影响；</li>
<li>实验5改变训练集和测试集的标记可靠性，得到一系列组合，以量化标记可靠程度对预测能力的影响。</li>
</ul>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><h3 id="问题一-情感回归的音频特征"><a href="#问题一-情感回归的音频特征" class="headerlink" title="[问题一] 情感回归的音频特征"></a>[问题一] 情感回归的音频特征</h3><ol>
<li>愉悦度维度的特征选择：loudness_ psysound、harmony_psysound、timbre_psysound；</li>
<li>唤醒度维度的特征选择：timbre_psysound、rhythm_mirtb；</li>
<li>单独的<code>Loudness</code>和<code>Timbre</code>特征在愉悦度和唤醒度上表现都非常好；</li>
<li>单独的<code>Rhythm</code>特征对愉悦度预测有效；</li>
<li>单独的<code>Chroma</code>特征有助于唤醒度预测，且对单一数据集内的愉悦度预测有用；</li>
<li><code>Harmony</code>特征有利于单一数据集内的愉悦度预测，但与唤醒度预测无关；</li>
<li>多种特征的联合可以提高模型的预测能力，尤其是在愉悦度维度。</li>
</ol>
<h3 id="问题二-交叉数据集通用性"><a href="#问题二-交叉数据集通用性" class="headerlink" title="[问题二] 交叉数据集通用性"></a>[问题二] 交叉数据集通用性</h3><ol>
<li>训练集越大，愉悦度和唤醒度的预测越好；</li>
<li>平衡训练集和测试集的标记可靠性对交叉数据集愉悦度预测有用，而可靠程度越高，唤醒度预测越准；</li>
<li>在愉悦度维度，相同的文化背景对交叉数据集预测非常重要，如果歌曲本身和打标签的人都是不同文化背景下的，那么模型的泛化能力将无法保证，除非训练集和测试集都有相当高的标记可靠性；但文化背景对唤醒度预测影响不大，只要相关数据集的标记可靠性不是太低，情感回归模型在交叉数据集的表现和单一数据集内的表现相似。</li>
</ol>
<h2 id="启发和收获"><a href="#启发和收获" class="headerlink" title="启发和收获"></a>启发和收获</h2><ol>
<li>数据集标签的评估量化数值<code>Krippendorff’s alpha</code></li>
<li>AMG1608注释者的标记质量控制策略</li>
<li>多特征集的融合互补有助于提高预测能力</li>
<li>该论文的实验设计逻辑非常严谨，变量控制严格，值得学习；</li>
<li>实验的结果分析和结论不一样，结果分析应该就实验数据表现的方方面面都做以分析，甚至可以发掘到意料之外的有意思信息；而结论则是回答实验之初提出的问题。</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <em>Hu X, Yang Y H. Cross-dataset and Cross-cultural Music Mood Prediction: A Case on Western and Chinese Pop Songs[J]. IEEE Transactions on Affective Computing, 2016.</em></p>
]]></content>
      
        
        <tags>
            
            <tag> MER </tag>
            
            <tag> dataset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[离散傅里叶变换(DFT)]]></title>
      <url>/2017/05/25/dft/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>对于音频信号处理而言，<code>离散傅里叶变化(DFT)</code>是最最常用的函数工具。它将信号的时域采样变换为其<code>离散时间傅里叶变化(DTFT)</code>的频域采样（在\([0,2\pi]\)之间进行均匀采样）,最后得到数字信号在区间\([0,(k-1)f_s/N]\)内的离散频谱值。</p>
<p>在形式上，变换两端（时域和频域上）的序列是有限长的，而实际上这两组序列都应当被认为是离散周期信号的主值序列。即使对有限长的离散信号作DFT，也应当将其看作其周期延拓的变换。</p>
<p>DFT的变化等式为：<br>$$X[k]=  \sum_{n=0}^{N-1}{x[n]e^{−j2{\pi}kn/N}}   (k=0,…,N−1)$$<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># DFT的Python实现</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFT</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    Input:</span></div><div class="line"><span class="string">        x (numpy array) = input time sequence of N samples</span></div><div class="line"><span class="string">    Output:</span></div><div class="line"><span class="string">        X (numpy array) = The N point DFT of the input sequence x</span></div><div class="line"><span class="string">    """</span></div><div class="line"></div><div class="line">    N = len(x)</div><div class="line">    n = np.arange(N)</div><div class="line">    X = np.array([])</div><div class="line"></div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(N):</div><div class="line">        Xk = sum(x*np.conjugate(np.exp(<span class="number">1j</span>*<span class="number">2</span>*np.pi*k/N * n)))</div><div class="line">        X = np.append(X, Xk)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> X</div></pre></td></tr></table></figure>
<p>DFT的逆变化：</p>
<p>$$x[n]=  \frac{1}{N}\sum_{k=0}^{N-1}{X[k]e^{j2{\pi}nk/N}}   (n=0,…,N−1)$$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># IDFT的Python实现</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">IDFT</span><span class="params">(x)</span>:</span></div><div class="line">     <span class="string">"""</span></div><div class="line"><span class="string">    Input:</span></div><div class="line"><span class="string">        X (numpy array) = frequency spectrum (length N)</span></div><div class="line"><span class="string">    Output:</span></div><div class="line"><span class="string">        The function should return a numpy array of length N </span></div><div class="line"><span class="string">        x (numpy array) = The N point IDFT of the frequency spectrum X</span></div><div class="line"><span class="string">    """</span></div><div class="line">    </div><div class="line">    x = np.array([])</div><div class="line">    N = len(X)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(N):</div><div class="line">        xn = <span class="number">1.0</span>/N * sum(X*np.exp(<span class="number">1j</span>*<span class="number">2</span>*np.pi*n/N * np.arange(N)))</div><div class="line">        x = np.append(x,xn)</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> x</div></pre></td></tr></table></figure>
<h2 id="DFT的几条重要性质"><a href="#DFT的几条重要性质" class="headerlink" title="DFT的几条重要性质"></a>DFT的几条重要性质</h2><p>备注：\(x[n]\)是时域信号，\(X[k]\)是相应的频域信号；\(mX=20\log_{10}(|X|)\)是幅度谱(dB)，\(pX=\angle{X} \)是相位谱。</p>
<p>P1. 线性性质(Linearity)<br>$$ax_1[n]+bx_2[n] \Leftrightarrow aX_1[k]+bX_2[k] $$</p>
<p>P2. 时移性和频移性(Shift) ：移动之后幅度谱不变相位谱改变。<br>$$x[n-n_0] \Leftrightarrow e^{-j2{\pi}kn_0/N}X[k] $$</p>
<p>P3. 对称性(Symmetry)：<br>$$\begin{align} x[n]real \Leftrightarrow \mathfrak{R}(X[k])even{\quad}and{\quad}\mathfrak{I}(X[k])odd \newline \Leftrightarrow |X[k]|even \quad and \quad \angle{X[k]}odd \quad \end{align}$$</p>
<p>$$\begin{align} x[n]real\&amp;even \Leftrightarrow \mathfrak{R}(X[k])even{\quad}and{\quad}\mathfrak{I}(X[k])=0 \newline \Leftrightarrow |X[k]|even \quad and \quad \angle{X[k]}=n\pi \quad \end{align}$$</p>
<p>P4. 卷积定理(Convolution)<br>$$x_1[n]\otimes x_2[n] \Leftrightarrow X_1[K]X_2[K]$$</p>
<h2 id="DFT中的处理方法"><a href="#DFT中的处理方法" class="headerlink" title="DFT中的处理方法"></a>DFT中的处理方法</h2><ul>
<li>Energy conservation  </li>
<li>Phase unwrapping</li>
<li>Zero padding</li>
<li>Fast Fourier Transform (FFT) </li>
<li>FFT and zero-phase windowing </li>
<li>Analysis/synthesis</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Audio Signal Processing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MIR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音频信号处理基础数学和工具]]></title>
      <url>/2017/05/18/ASPbasic/</url>
      <content type="html"><![CDATA[<p>本文记录一下学习<code>音频信号处理(Audio Signal Processing)</code>过程中遇到的基础数学和实用工具。</p>
<a id="more"></a>
<h2 id="简单的数学基础"><a href="#简单的数学基础" class="headerlink" title="简单的数学基础"></a>简单的数学基础</h2><ul>
<li>正弦函数(Sinusoidal function)</li>
<li>复数(Complex numbers)</li>
<li>欧拉公式(Euler’s formula)</li>
<li>复正弦曲线(Complex sinusoids)</li>
<li>内积(Scalar product of sequences)</li>
<li>奇偶函数(even and odd functions)</li>
<li>卷积(Convolutiond)</li>
</ul>
<h2 id="音频可视化、编辑、分析工具"><a href="#音频可视化、编辑、分析工具" class="headerlink" title="音频可视化、编辑、分析工具"></a>音频可视化、编辑、分析工具</h2><ul>
<li>Audacity</li>
<li>SonicVisualizer</li>
<li>sms-tools</li>
</ul>
<h2 id="Python音频处理工具库"><a href="#Python音频处理工具库" class="headerlink" title="Python音频处理工具库"></a>Python音频处理工具库</h2><ul>
<li><a href="http://essentia.upf.edu/documentation/" target="_blank" rel="external">essentia</a></li>
<li><a href="https://github.com/librosa/librosa" target="_blank" rel="external">librosa</a></li>
<li><a href="https://github.com/MTG/sms-tools" target="_blank" rel="external">sms-tools</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Audio Signal Processing </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MIR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《the Craft of Research》第一部分]]></title>
      <url>/2017/05/17/ResearchCraft/P1/</url>
      <content type="html"><![CDATA[<p><a href="http://mypage.zju.edu.cn/en/zhangkejun" target="_blank" rel="external">导师</a>推荐的一本书<em>the Craft of Research</em>，今天终于开始拜读，希望能有一些对于研究工作的启发。</p>
<a id="more"></a>
<h2 id="Thinking-in-print"><a href="#Thinking-in-print" class="headerlink" title="Thinking in print"></a>Thinking in print</h2><h3 id="什么是研究？"><a href="#什么是研究？" class="headerlink" title="什么是研究？"></a>什么是研究？</h3><p>研究是一个搜集资料，回答问题以解决难题的过程。</p>
<h3 id="为什么要写下来？"><a href="#为什么要写下来？" class="headerlink" title="为什么要写下来？"></a>为什么要写下来？</h3><p>以书面形式来思考有助于记忆、了解和获得新的观点。<br><code>“只有从快速混乱的思维中将特定的想法分离出来，并以一种有组织、有条理的形式确定下来，才能知道自己真正能思考什么。”</code></p>
<h3 id="研究报告为什么要正式？"><a href="#研究报告为什么要正式？" class="headerlink" title="研究报告为什么要正式？"></a>研究报告为什么要正式？</h3><p>要以读者的角度来思考。以别人的标准和价值去检验自己的想法可以让我们更加理解自己和自己的想法。为别人写作会比为自己写作的要求更严格。</p>
<h2 id="与读者对话"><a href="#与读者对话" class="headerlink" title="与读者对话"></a>与读者对话</h2><h3 id="明确作者的角色"><a href="#明确作者的角色" class="headerlink" title="明确作者的角色"></a>明确作者的角色</h3><ul>
<li>我找到一些真的很有趣的东西</li>
<li>对你很重要的实际难题，我找到了一个解决方案</li>
<li>我找到了一个对于你而言很重要的问题的答案</li>
</ul>
<h3 id="明确读者的角色"><a href="#明确读者的角色" class="headerlink" title="明确读者的角色"></a>明确读者的角色</h3><ul>
<li>用一些我不知道但有趣的事情来让我愉悦 –&gt; 对我的题目一无所知的一般读者？</li>
<li>帮我解决实际问题 –&gt; 信息充分的一般人员?</li>
<li>帮助我了解更多的事物 –&gt; 专业人员?</li>
</ul>
<h3 id="团队写作"><a href="#团队写作" class="headerlink" title="团队写作"></a>团队写作</h3><p>成功合作的三个关键：经常讨论(talk a lot)、容许异议(agree to disagree)、组织与规划(organize and plan)<br>团体工作的三个策略：分工委派(delete and delegate)、同步进行(work side by side)、轮流进行(take turns)</p>
<h2 id="给研究新手的建议"><a href="#给研究新手的建议" class="headerlink" title="给研究新手的建议"></a>给研究新手的建议</h2><ol>
<li>明白不确定感和焦虑是无法避免的，不要持续跟自己过不去，这是缺乏经验的现象；</li>
<li>随时书写概述、评论和问题；</li>
<li>把整个过程分成可处理的数个步骤；</li>
<li>与导师及时沟通，期待他们的帮助。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> the Craft of Research </category>
            
        </categories>
        
        
        <tags>
            
            <tag> efficiency </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[50首流行音乐的收集处理]]></title>
      <url>/2017/05/16/50M/</url>
      <content type="html"><![CDATA[<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>为后续的大规模音乐数据集建立工作试水，希望能在这个过程中发现之前没有注意到的问题，并提出相应解决方案。</p>
<a id="more"></a>
<h2 id="音乐收集和预处理"><a href="#音乐收集和预处理" class="headerlink" title="音乐收集和预处理"></a>音乐收集和预处理</h2><p>从<a href="https://y.qq.com/n/yqq/toplist/107.html" target="_blank" rel="external">英国UK榜第19周榜单</a>下载流行乐37首，分发给13位同学裁剪并打分。（每人3首左右，这里音乐不重复打分，但在正式实验中每首歌需要10个左右受试者打分）最后回收到：</p>
<ul>
<li>34首音乐片段（裁剪高潮部分，30秒左右，正式实验中需要45秒左右）</li>
<li>音乐曲名、作者、排行等元信息</li>
<li>愉悦度和唤醒度打分（取值区间[-5,5]）</li>
</ul>
<h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><p>使用<code>openSMILE</code>批量提取歌曲特征，得到<code>IS13features.arff</code>特征文件，包含了34首歌曲，每首6373维特征向量（使用<a href="/2017/05/02/IS13feature/" title="2013 ComParE Feature Set">2013 ComParE Feature Set</a>音乐情感特征集）。</p>
<h2 id="处理打分数据，得到情感标签"><a href="#处理打分数据，得到情感标签" class="headerlink" title="处理打分数据，得到情感标签"></a>处理打分数据，得到情感标签</h2><p>根据打分给每首歌打三个标签<code>情感正负</code>（即愉悦度的正负值），<code>情感强弱</code>（即唤醒度的正负值），<code>四种基本情感</code>（即VA二维平面的四个象限：高兴、惊恐、厌烦、轻松）。</p>
<p>将歌曲的特征向量和情感标签写入文件<code>IS13features_withlabels.arff</code>。</p>
<h2 id="简单过一下分类流程"><a href="#简单过一下分类流程" class="headerlink" title="简单过一下分类流程"></a>简单过一下分类流程</h2><p>使用<code>Weka</code>中的<code>libsvm</code>对音乐情感进行简单分类。（注意这里只是简单过一下分类流程，以后真实应用中是不会这样做的，如在VA模型的2维空间中做回归分析）  </p>
<p>10-fold交叉验证结果：  </p>
<ol>
<li><p>情感正负(V)  </p>
<img src="/2017/05/16/50M/V.png">
</li>
<li><p>情感强弱(A)  </p>
<img src="/2017/05/16/50M/A.png">
</li>
<li><p>四种基本情感(VA)  </p>
<img src="/2017/05/16/50M/VA.png">
</li>
</ol>
<h2 id="发现问题和拟解决方案"><a href="#发现问题和拟解决方案" class="headerlink" title="发现问题和拟解决方案"></a>发现问题和拟解决方案</h2><ol>
<li>在音乐打分前没有规范音乐文件名（没有给每首音乐相应的ID），给音乐文件与打分数据的联结处理带来麻烦 –&gt; 可以使用批处理给音乐规范ID并将其原文件名中包含的信息（歌曲名字、作者）写到专门的<code>metadata</code>文件中。</li>
<li><code>metadata</code>文件中还应该包含歌曲的排名和风格等元素 –&gt; 这些需要爬虫支持（人工搜集还是不友好的。。）</li>
<li><code>ffmpeg</code>MP3转WAV的时候报Warning，发现这次使用的音乐裁剪工具没有修改MP3的文件信息，可能会对以后的应用埋下隐患。（感觉是暴力裁剪的，文件头里的duration字段，frame字段等和裁剪后的文件真实信息不匹配）–&gt; 换一个裁剪工具（可以试试也用ffmpeg）</li>
<li>受试者裁剪肯定是不行的 –&gt; 机器裁剪还是我们人工裁剪？</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> MER </tag>
            
            <tag> dataset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Music Information Retrieval]]></title>
      <url>/2017/05/09/mirlec/</url>
      <content type="html"><![CDATA[<p>台湾国立清华大学开设了一门<code>Music Information Retrieval</code>课程来介绍一些音乐信息检索的基础技术，主讲教师是在MIR领域有名的大牛<code>Yi-Hsuan Yang</code>和<code>Li Su</code>。虽然没有视频公开课，但是在其<a href="https://twtmir.wordpress.com/" target="_blank" rel="external">课程网站</a>上公开了授课PPT，值得对这方面感兴趣的同学翻看一下。</p>
<a id="more"></a>
<h2 id="Music-Essences"><a href="#Music-Essences" class="headerlink" title="Music Essences"></a>Music Essences</h2><ul>
<li>Pitch<br>Frequency</li>
<li>Loudness<br>Dynamic, Loudness, Intensity</li>
<li>Timbre<br>Energy features, Temporal features, Spectral features, harmonic feaures</li>
</ul>
<h2 id="Signal-Processing"><a href="#Signal-Processing" class="headerlink" title="Signal Processing"></a>Signal Processing</h2><ul>
<li>STFT</li>
</ul>
<h2 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h2><ul>
<li>Pitch Detection</li>
<li>Classification</li>
<li>Synchronization</li>
<li>Separation</li>
<li>Tagging/Recomment</li>
<li>Structure Analysis</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> MER </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在博客中插入数学公式]]></title>
      <url>/2017/05/02/tex/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>Markdown本身并不支持数学公式的书写，使用<a href="https://www.mathjax.org/" target="_blank" rel="external">MathJax</a>来给我的博客插入公式只需要两步：  </p>
<ol>
<li>链接MathJax到要包含公式的网页中；  </li>
<li>将公式放入网页让MathJax可以展示它。</li>
</ol>
<p><a href="https://mathjax-chinese-doc.readthedocs.io/en/latest/start.html" target="_blank" rel="external">中文版入门指南</a><br><a id="more"></a></p>
<h2 id="到内容分发服务的安全链接"><a href="#到内容分发服务的安全链接" class="headerlink" title="到内容分发服务的安全链接"></a>到内容分发服务的安全链接</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> <span class="keyword">async</span></div><div class="line">  src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="插入公式"><a href="#插入公式" class="headerlink" title="插入公式"></a>插入公式</h2><p>行内公式使用<code>\\(...\\)</code>，两个<code>\</code>有一个是转义字符。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个行内公式\\(c = a+b\\)</div></pre></td></tr></table></figure>
<p>效果是：<br>这是一个行内公式\(c = a+b\)</p>
<p>行间公式使用<code>$$...$$</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这是一个行间公式</div><div class="line">$$ E = mc^&#123;2&#125; $$</div></pre></td></tr></table></figure>
<p>这是一个行间公式<br>$$ E = mc^{2} $$</p>
<h2 id="Hexo与Mathjax的转义冲突"><a href="#Hexo与Mathjax的转义冲突" class="headerlink" title="Hexo与Mathjax的转义冲突"></a>Hexo与Mathjax的转义冲突</h2><p>按照以上两个步骤，按理来说应该就可以成功显示数学公式了。但是，有些时候会发现一些复杂的数学公式不能成功解析，原因是Hexo本身与Mathjax有一些特殊符号是互相冲突的：</p>
<ul>
<li><code>_</code>的转义，在markdown中，<code>_</code>代表斜体，但在LaTeX中却是下标的意思；</li>
<li><code>\\</code>在markdown中会被定义为<code>\</code>，但在LaTeX中却代表换行；</li>
<li><code>*</code>在markdown中也是粗斜体的表示符号，在LaTeX中也被使用。</li>
</ul>
<p><a href="https://segmentfault.com/a/1190000007261752" target="_blank" rel="external">Hexo下mathjax的转义问题</a>提到了一些解决办法：</p>
<ol>
<li>手动转义：最直接，但通用型差，在其他markdown引擎中会解析失败；</li>
<li>更换Hexo的markdown引擎：把Hexo默认的渲染markdown的引擎换掉，感觉有点过重了；</li>
<li>修改Hexo渲染源码：修改Hexo的渲染源码，不改变文章内容，可迁移。</li>
</ol>
<p>建议使用第3种办法，修改Hexo的渲染源码<code>nodes_modules/marked/lib/marked.js</code>:</p>
<p>S1. 去掉<code>\</code>的转义：<br>将文件中的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/</span>,</div></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*&#123;&#125;\[\]()# +\-.!_&gt;])/</span>,</div></pre></td></tr></table></figure>
<p>S2. 去掉特殊符号<code>_</code>：<br>找到斜体符号定义</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">em: <span class="regexp">/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</div></pre></td></tr></table></figure>
<p>去掉<code>_</code>的定义，修改为：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">em:<span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</div></pre></td></tr></table></figure>
<p>修改完这两处后，LaTeX公式中的<code>_</code>和<code>\\</code>就不会解析错误啦。但值得注意的是<code>*</code>的问题没有被解决，不过<code>*</code>在LaTeX中使用并不多，markdown也同样需要一个表示粗斜体的符号，所以不在渲染文件中更改<code>*</code>的定义。这样就需要我们在写数学公式的时候注意<code>*</code>的使用了（例如，<code>\begin{align*}</code>应该改为<code>\begin{align}</code>）。</p>
]]></content>
      
        
        <tags>
            
            <tag> tool </tag>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2013 ComParE Feature Set]]></title>
      <url>/2017/05/02/IS13feature/</url>
      <content type="html"><![CDATA[<p>This blog will introduce a well-evolved feature set for automatic recognition of audio emotion, ie. 2013 ComParE Feature Set[1]. The ComParE feature set contains <code>6373</code> features. It consists of some <code>generic acoustic emotion descriptors</code> and their <code>statistical functionals</code>.</p>
<a id="more"></a>
<h2 id="65-Acoustic-low-level-descriptors-LLDs"><a href="#65-Acoustic-low-level-descriptors-LLDs" class="headerlink" title="65 Acoustic low-level descriptors(LLDs)"></a>65 Acoustic low-level descriptors(LLDs)</h2><p>The low-level descriptors cover a broad set of descriptors from the fields of <code>speech processing</code>, <code>Music Information Retrieval</code>, and <code>general sound analysis</code>. The set includes <code>energy</code>, <code>spectral</code>, and <code>voicing related low-level descriptors (LLDs)</code> including logarithmic harmonic-to-noise ratio (HNR), spectral harmonicity, and psychoacoustic spectral sharpness. Details are shown below.[2]</p>
<h3 id="4-ENERGY-RELATED-LLD"><a href="#4-ENERGY-RELATED-LLD" class="headerlink" title="4 ENERGY RELATED LLD"></a>4 ENERGY RELATED LLD</h3><ul>
<li>Sum of auditory spectrum (loudness)</li>
<li>Sum of RASTA-style filtered auditory spectrum </li>
<li>RMS energy </li>
<li>zero-crossing rate</li>
</ul>
<h3 id="55-SPECTRAL-LLD"><a href="#55-SPECTRAL-LLD" class="headerlink" title="55 SPECTRAL LLD"></a>55 SPECTRAL LLD</h3><ul>
<li>RASTA-style auditory spectrum, bands 1–26 (0–8 kHz) </li>
<li>MFCC 1–14</li>
<li>Spectral energy 250–650 Hz, 1 k–4 kHz</li>
<li>Spectral roll off point 0.25, 0.50, 0.75, 0.90</li>
<li>Spectral flux, centroid, entropy, slope </li>
<li>Psychoacoustic sharpness, harmonicity </li>
<li>Spectral variance, skewness, kurtosis</li>
</ul>
<h3 id="6-VOICING-RELATED-LLD"><a href="#6-VOICING-RELATED-LLD" class="headerlink" title="6 VOICING RELATED LLD"></a>6 VOICING RELATED LLD</h3><ul>
<li>F 0 (SHS and viterbi smoothing)</li>
<li>Prob. of voice</li>
<li>Log. HNR, Jitter (local, delta), Shimmer (local)</li>
</ul>
<h2 id="Statistical-functionals"><a href="#Statistical-functionals" class="headerlink" title="Statistical functionals"></a>Statistical functionals</h2><p>Statistical functionals include mean, moments, quartiles, 1- and 99-percentiles, as well as contour related measurements such as (relative) rise and fall times, amplitudes and standard deviations of local maxima (‘peaks’), and linear and quadratic regression coefficients.</p>
<h3 id="FUNCTIONALS-APPLIED-TO-LLD-deta-LLD"><a href="#FUNCTIONALS-APPLIED-TO-LLD-deta-LLD" class="headerlink" title="FUNCTIONALS APPLIED TO LLD/deta_LLD"></a>FUNCTIONALS APPLIED TO LLD/deta_LLD</h3><ul>
<li>Quartiles 1–3, 3 inter-quartile ranges</li>
<li>1% Percentile (~=min), 99% percentile (~=max) </li>
<li>Percentile range 1–99%</li>
<li>Position of min/max, range (max   min) </li>
<li>Arithmetic mean, root quadratic mean</li>
<li>Contour centroid, flatness</li>
<li>Standard deviation, skewness, kurtosis</li>
<li>Rel. duration LLD is above 25/50/75/90% range </li>
<li>Rel. duration LLD is rising</li>
<li>Rel. duration LLD has positive curvature</li>
<li>Gain of linear prediction (LP), LP coefficients 1–5 </li>
<li>Mean, max, min, SD of segment length</li>
</ul>
<h3 id="FUNCTIONALS-APPLIED-TO-LLD-ONLY"><a href="#FUNCTIONALS-APPLIED-TO-LLD-ONLY" class="headerlink" title="FUNCTIONALS APPLIED TO LLD ONLY"></a>FUNCTIONALS APPLIED TO LLD ONLY</h3><ul>
<li>Mean value of peaks</li>
<li>Mean value of peaks – arithmetic mean </li>
<li>Mean/SD of inter peak distances</li>
<li>Amplitude mean of peaks, of minima</li>
<li>Amplitude range of peaks</li>
<li>Mean/SD of rising/falling slopes</li>
<li>Linear regression slope, offset, quadratic error </li>
<li>Quadratic regression a, b, offset, quadratic error </li>
<li>Percentage of non-zero frames</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Schuller B, Steidl S, Batliner A, et al. The INTERSPEECH 2013 computational paralinguistics challenge: social signals, conflict, emotion, autism[J]. 2013.<br>[2] Weninger F, Eyben F, Schuller B W, et al. On the acoustics of emotion in audio: what speech, music, and sound have in common[J]. 2013.</p>
]]></content>
      
        
        <tags>
            
            <tag> MER </tag>
            
            <tag> feature </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MER 声学特征提取]]></title>
      <url>/2017/04/29/featureExt/</url>
      <content type="html"><![CDATA[<h2 id="特征集和提取工具"><a href="#特征集和提取工具" class="headerlink" title="特征集和提取工具"></a>特征集和提取工具</h2><p>最近的任务目标是：确定<code>音乐情感特征集（声学特征）</code>和<code>提取方法</code>  </p>
<a id="more"></a>
<p>为了确定要提取的音乐情感声学特征集<code>Acoustics Features Set for Music Emotion</code>，最近看了很多相关文章（<a href="/2017/04/27/MERFeature/" title="Features in MER">Features in MER</a>）。发现对于以前的音乐情感研究工作，研究人员多数使用<a href="http://marsyas.info/" target="_blank" rel="external">Marsyas</a>（最新版本为2015年发布）和<a href="https://cn.mathworks.com/matlabcentral/fileexchange/24583-mirtoolbox" target="_blank" rel="external">MIRtoolbox</a>（MATLAB工具包）。</p>
<p>然而近年来有一个专用于<code>情感计算</code>和<code>音乐信息检索</code>的特征提取工具<code>openSMILE</code>异军突起，这是由TUM（德国慕尼黑工业大学）开发的开源工具，近年来多个Challenge（ISComparE, MediaEval, Emobase等）频繁使用其作为<code>Baseline feature dataset</code>的提取工具，<code>openSMILE</code>针对这几个挑战也在其发布的版本中包含了相应的<code>config</code>文件。（<a href="/2017/04/27/openSMILE/" title="openSMILE安装指南">openSMILE安装指南</a>）</p>
<p>最终，我决定使用<code>the 2013 Computational Paralinguistics Evaluation (ComParE)</code>[1] 提出的基线数据集<a href="/2017/05/02/IS13feature/" title="2013 ComParE Feature Set">2013 ComParE Feature Set</a>（它同样在<code>MediaEval 2014</code>中被作为基线数据集[2]）。它在[3] 中表现出了评估speech, music, 以及 acoustic events的多维度情感鲁棒性。</p>
<p>同时，我决定使用<code>openSMILE</code>作为特征提取工具。</p>
<h2 id="提取流程"><a href="#提取流程" class="headerlink" title="提取流程"></a>提取流程</h2><p>拟下载的音乐文件为<code>MP3</code>格式，而<code>openSMILE</code>只支持<code>WAV</code>，所以首先需要用<code>ffmpeg</code>转换格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh transformat.sh</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#transformat.sh</span></div><div class="line"><span class="comment">#transform MP3 to WAV</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"Please Enter the MusicPath -&gt; "</span></div><div class="line"><span class="built_in">read</span> mpath</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;mpath&#125;</span></div><div class="line">mkdir <span class="string">'wav'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> *.mp3</div><div class="line"><span class="keyword">do</span></div><div class="line">ffmpeg -i <span class="string">"<span class="variable">$&#123;m&#125;</span>"</span> <span class="string">"wav/<span class="variable">$&#123;m%.mp3&#125;</span>.wav"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>然后使用<code>openSMILE</code>批量提取音乐特征：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sh smileEX.sh</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#smileEX.sh</span></div><div class="line"><span class="comment">#Extract features in batch by using openSMILE</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"Please Enter the openSMILE Path -&gt; "</span></div><div class="line"><span class="built_in">read</span> opensmile</div><div class="line"><span class="built_in">echo</span> <span class="string">"Please Enter the Music Path -&gt; "</span></div><div class="line"><span class="built_in">read</span> mpath</div><div class="line"><span class="built_in">cd</span> <span class="variable">$&#123;mpath&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> *.wav</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="variable">$&#123;opensmile&#125;</span>/SMILExtract -C <span class="string">"<span class="variable">$&#123;opensmile&#125;</span>/config/IS13_ComParE.conf"</span>  -I <span class="string">"<span class="variable">$&#123;m&#125;</span>"</span>  -O  IS13features.arff  -instname <span class="string">"<span class="variable">$&#123;m%.wav&#125;</span>"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<p>从QQ音乐和网易云音乐下载的测试音乐特征提取成功。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Schuller B, Steidl S, Batliner A, et al. The INTERSPEECH 2013 computational paralinguistics challenge: social signals, conflict, emotion, autism[J]. 2013.<br>[2] Aljanaki A, Yang Y H, Soleymani M. Developing a benchmark for emotional analysis of music[J]. PloS one, 2017, 12(3): e0173392.<br>[3] Weninger F, Eyben F, Schuller B W, et al. On the acoustics of emotion in audio: what speech, music, and sound have in common[J]. 2013.</p>
]]></content>
      
        
        <tags>
            
            <tag> MER </tag>
            
            <tag> feature </tag>
            
            <tag> tool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多组SSH-Key公钥/私钥的配置]]></title>
      <url>/2017/04/29/Multissh/</url>
      <content type="html"><![CDATA[<p>由于在同时使用<code>Github</code>和<code>Git@OSchina</code>（Github私有库需要收费且Git@OSchina在国内的访问速度较快），所以需要设置两组SSH-Key。</p>
<a id="more"></a>
<h2 id="本地生成公私钥"><a href="#本地生成公私钥" class="headerlink" title="本地生成公私钥"></a>本地生成公私钥</h2><p>Step1. 本地生成ssh keys命令：<code>ssh-keygen -t rsa -C &quot;注册邮箱&quot;</code>，生成的公私秘钥会提示是否需要重命名，键入自定义名称（防止再次生成的秘钥覆盖之前的），可跳过密码设置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成github ssh keys</span></div><div class="line">$ ssh-keygen -t rsa -C <span class="string">"githubEmail"</span></div><div class="line">Generating public/private rsa key <span class="keyword">in</span> pair...</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (<span class="string">"默认位置"</span>): ~/.ssh/github_rsa </div><div class="line">Enter passphrase ...</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment"># 生成git@oschina ssh keys</span></div><div class="line">$ ssh-keygen -t rsa -C <span class="string">"git@oschinaEmail"</span></div><div class="line">Generating public/private rsa key <span class="keyword">in</span> pair...</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (<span class="string">"默认位置"</span>): ~/.ssh/oschina_rsa </div><div class="line">Enter passphrase ...</div><div class="line">...</div></pre></td></tr></table></figure>
<p>Step2. 配置<code>config</code>将两组秘钥对应到相应的远程仓库。在.ssh/目录下新建<code>config</code>文件，其中<code>Host</code>是一个别名，命名可以随意，用来进行远程连接，当然使用真实的主机名称也是可以的。<code>HostName</code>和<code>IdentityFile</code>是各自主机名称以及对应的秘钥文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#github configuration</span></div><div class="line">Host github.com</div><div class="line">	HostName github.com</div><div class="line">	IdentityFile ~/.ssh/github_rsa</div><div class="line">	User githubEmail</div><div class="line"></div><div class="line"><span class="comment">#gitoschina configuration</span></div><div class="line">Host git.oschina.net</div><div class="line">	HostName git.oschina.net</div><div class="line">	IdentityFile ~/.ssh/oschina_rsa</div><div class="line">	User git@oschinaEmail</div></pre></td></tr></table></figure>
<h2 id="将公钥添加到账户"><a href="#将公钥添加到账户" class="headerlink" title="将公钥添加到账户"></a>将公钥添加到账户</h2><p>分别将生成的公钥添加到相应的Git账户</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试Git连接，提示是否建立连接：yes。成功后会提示<code>Welcome...</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line">$ ssh -T git@git.oschina.net</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ssh </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Probably Graphic Model]]></title>
      <url>/2017/04/27/ApplicationMath/pgm/</url>
      <content type="html"><![CDATA[<p>简而言之，数形结合的思想。</p>
<h2 id="贝叶斯网络"><a href="#贝叶斯网络" class="headerlink" title="贝叶斯网络"></a>贝叶斯网络</h2><p>即有向图模型<br><img src="/2017/04/27/ApplicationMath/pgm/bayes.png"></p>
<h2 id="马尔可夫随机场"><a href="#马尔可夫随机场" class="headerlink" title="马尔可夫随机场"></a>马尔可夫随机场</h2><p>即无向图模型<br><img src="/2017/04/27/ApplicationMath/pgm/makov.png"></p>
]]></content>
      
        <categories>
            
            <category> 应用工程数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markov Chains & HMM]]></title>
      <url>/2017/04/27/ApplicationMath/mc/</url>
      <content type="html"><![CDATA[<p>会其意，知其形。</p>
<h2 id="Markov-Chain"><a href="#Markov-Chain" class="headerlink" title="Markov Chain"></a>Markov Chain</h2><p>服从马尔可夫性（无记忆性）：当前状态只与前一个状态有关，与更往前的状态无关。</p>
<h2 id="HMM-Hiden-Markov-Model"><a href="#HMM-Hiden-Markov-Model" class="headerlink" title="HMM(Hiden Markov Model)"></a>HMM(Hiden Markov Model)</h2><p>一个概率模型，用于描述系统隐性状态的转移和隐性状态的表现（输出）概率。</p>
<ul>
<li>可见状态链</li>
<li>隐含状态链    <img src="/2017/04/27/ApplicationMath/mc/chains.jpg"></li>
<li>隐含状态数量  </li>
<li>隐含状态之间的转换概率(transition probability)    <img src="/2017/04/27/ApplicationMath/mc/transition.jpg"></li>
<li>隐含状态到可见状态的输出概率(emission probability)    <img src="/2017/04/27/ApplicationMath/mc/emission.jpg">  
</li>
</ul>
<h3 id="HMM能做什么，怎么做？"><a href="#HMM能做什么，怎么做？" class="headerlink" title="HMM能做什么，怎么做？"></a>HMM能做什么，怎么做？</h3><ol>
<li>估计(evaluation)<br> 转换概率+输出概率 -&gt; 可见状态出现的概率 （动态规划、forward algorithm）</li>
<li>解码(decoding)<br> 转换概率+输出概率+可见状态链 -&gt; 隐含状态链 （极大似然、Viterbi algorithm）      </li>
<li>学习(learning)<br> a. 有可见状态链和隐含状态链-&gt;HMM模型<br> b. 只有可见状态链-&gt;HMM模型</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 应用工程数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PCA主成分分析]]></title>
      <url>/2017/04/27/ApplicationMath/pca/</url>
      <content type="html"><![CDATA[<ol>
<li>零均值化：每个属性值减去其均值</li>
<li>求协方差矩阵</li>
<li>求协方差矩阵的特征值和特征向量</li>
<li>保留主成分</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 应用工程数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Point Esimation 点估计]]></title>
      <url>/2017/04/27/ApplicationMath/pe/</url>
      <content type="html"><![CDATA[<h2 id="Hoeffding不等式"><a href="#Hoeffding不等式" class="headerlink" title="Hoeffding不等式"></a>Hoeffding不等式</h2><p>用于确认精确度，适用于所有有界的随机变量。假设有两两独立的变量X1…Xn，其中Xi都是<code>几乎</code>有界的变量，即满足  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">P(ai&lt;=Xi&lt;=bi) = 1</div></pre></td></tr></table></figure>
<p>则其期望满足：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">P(|mean(X)-E(mean(X))|&gt;=t) &lt;= 2exp(-2(nt)^2/sum((bi - ai)^2))</div></pre></td></tr></table></figure>
<h2 id="Regression回归分析"><a href="#Regression回归分析" class="headerlink" title="Regression回归分析"></a>Regression回归分析</h2><p>Bias-Variance Tradeoff</p>
<ul>
<li>欠拟合 underfitting 高偏差 bias</li>
<li>过拟合 overfitting 高方差 variance</li>
</ul>
<p>解决方法：1、减少选取的特征数量；2、正则化 regularization</p>
<h2 id="Polynomial-Curve-Fitting"><a href="#Polynomial-Curve-Fitting" class="headerlink" title="Polynomial Curve Fitting"></a>Polynomial Curve Fitting</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Y = XA </div><div class="line">#使用法向量计算最小二乘法结果</div><div class="line">A = (X.T * X) * X.T * Y</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 应用工程数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聚类]]></title>
      <url>/2017/04/27/ApplicationMath/cluster/</url>
      <content type="html"><![CDATA[<h2 id="相似性衡量"><a href="#相似性衡量" class="headerlink" title="相似性衡量"></a>相似性衡量</h2><ul>
<li>距离</li>
<li>相似性</li>
<li>核函数</li>
<li>DTW（dynamic time warping 一种特殊的距离算法）</li>
</ul>
<h2 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h2><ul>
<li><p>划分聚类(Partition-based methods)<br>确认聚类数量，挑选初始点 -&gt; 类内的点足够近，类间的点足够远。</p>
</li>
<li><p>密度聚类(Density-based methods)<br>指定圈的最大半径，包含的最少点数量 -&gt; 画圈。</p>
</li>
<li><p>模型聚类(Model-based methods)<br>基于概率模型和神经网络模型 -&gt; 同一类属于同一概率分布</p>
</li>
<li><p>层次聚类(Hierarchical methods)<br>自下而上法 (bottom-up) 和自上而下法 (top-down)，根据linkage迭代联合或者排异。</p>
</li>
<li><p>网格聚类(Grid-based methods)<br>将数据空间划分为网格单元，将数据对象集映射到网格单元中。计算每个单元的密度，根据阈值确定高密度单元 -&gt; 相近的高密度单元组成类</p>
</li>
</ul>
<a id="more"></a>
<h3 id="常用聚类算法"><a href="#常用聚类算法" class="headerlink" title="常用聚类算法"></a>常用聚类算法</h3><p><a href="http://scikit-learn.org/stable/modules/clustering.html#clustering" target="_blank" rel="external">Overview of clustering methods</a>  </p>
<ul>
<li><p>k-means</p>
<img src="/2017/04/27/ApplicationMath/cluster/kmeans01.png">
<img src="/2017/04/27/ApplicationMath/cluster/kmeans02.png">
</li>
<li><p>GMM</p>
<img src="/2017/04/27/ApplicationMath/cluster/gmm01.png">
<img src="/2017/04/27/ApplicationMath/cluster/gmm02.png">
</li>
</ul>
<h2 id="数据简化"><a href="#数据简化" class="headerlink" title="数据简化"></a>数据简化</h2><ul>
<li>变化</li>
<li>降维</li>
<li>抽样</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 应用工程数学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音乐情感识别简介]]></title>
      <url>/2017/04/27/MERintro/</url>
      <content type="html"><![CDATA[<ul>
<li><p>音乐情感识别的重要性：<br>1、用于音乐检索；2、方便用户组织结构；3、增强人机交互。</p>
</li>
<li><p>音乐情感识别的基础框架：  </p>
<img src="/2017/04/27/MERintro/merc1-1.png" title="音乐情感识别概略图">
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>音乐情感识别的四个问题：  </p>
<ol>
<li>情感描述的歧义和粒度（不同情感术语之间的模糊边界，少的情感类别不足以描述丰富的情感而多的会增加难度降低准确率）；  </li>
<li>情感注释的认知负载；  </li>
<li>情绪感知的主观性；  </li>
<li>低层特征和高层感知之间的语义鸿沟。  <img src="/2017/04/27/MERintro/merc1-2.png" title="四个问题">
</li>
</ol>
</li>
<li><p>《Music Emotion Recognizition》概览  </p>
<img src="/2017/04/27/MERintro/merc1-3.png" title="本书概览">
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> MER </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openSMILE]]></title>
      <url>/2017/04/27/openSMILE/</url>
      <content type="html"><![CDATA[<p>S1. 下载最新的稳定版本<a href="http://audeering.com/technology/opensmile/#download" target="_blank" rel="external">openSMILE</a></p>
<p>S2. 下载依赖工具库  </p>
<ul>
<li>autotools(automake, autoconf, libtool, and m4)  </li>
<li>make</li>
<li>GNU C and C++ compiler gcc and g++</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ brew install automake</div><div class="line">$ brew install autoconf</div><div class="line">$ brew install libtool</div><div class="line">$ brew install m4</div><div class="line">$ brew install gcc</div></pre></td></tr></table></figure>
<p>S3. 解压并安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar-zxvf opensmile-X.X.X.tar.gz</div><div class="line">$ cd opensmile-X.X.X</div><div class="line">$ sh buildStandalone.sh</div></pre></td></tr></table></figure>
<p>S4. 测试安装是否成功  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ SMILExtract -h</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> MER </tag>
            
            <tag> feature </tag>
            
            <tag> tool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Features in MER]]></title>
      <url>/2017/04/27/MERFeature/</url>
      <content type="html"><![CDATA[<h2 id="Analysis-Content"><a href="#Analysis-Content" class="headerlink" title="Analysis Content"></a>Analysis Content</h2><ul>
<li>Text-Content   (Web-Documents, Social-Tags, Lyrics)  </li>
<li>Audio-Content  （Acoustic Features）</li>
</ul>
<a id="more"></a>
<h2 id="Audio-Content"><a href="#Audio-Content" class="headerlink" title="Audio-Content"></a>Audio-Content</h2><p>P1. Measurement and time series analysis of emotion in music(Schubert1999 <em>Cited: 118’</em>)<br>A very old book introducing measurement and time series analysis of emotion in music.</p>
<table>
<thead>
<tr>
<th>Types</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>Loudnedss related</td>
<td>Dynamics</td>
</tr>
<tr>
<td>Pitch related</td>
<td>Mean pitch, Pitch range, Variation in pitch, Melodic contour, Register, Mode, Timbre, Harmony</td>
</tr>
<tr>
<td>Duration related</td>
<td>Tempo, Articulation, Note onset, Vibrato, Rhythm, Metre</td>
</tr>
</tbody>
</table>
<p>P2. Automatic mood detection from acoustic music data(ISMIR2003 <em>Cited: 233’</em>)<br>“It was indicated that mode, intensity, timbre and rhythm are of great significance in arousing different music moods. However, mode is very difficult to obtain from acoustic data (Hinn, 1996). Therefore, only the rest three features are extracted and used in our mood detection system.”</p>
<table>
<thead>
<tr>
<th>Types</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>Intensity</td>
<td>Root mean-square (RMS) level in decibels</td>
</tr>
<tr>
<td>Rhythm</td>
<td>Average strength, Average correlation peak, Average tempo</td>
</tr>
<tr>
<td>Timbre</td>
<td>Spectral Shape Features: Centroid, Bandwidth, Roll off, Spectral Flux; Spectral Contrast Features: Sub-band Peak, Sub-band Valley, Sub-band Average</td>
</tr>
</tbody>
</table>
<p>P3. Disambiguating Music Emotion Using Software Agents(ISMIR2004 <em>Cited: 118’</em>)<br>This paper confirmed the results of P2 which found that emotional intensity was highly correlated with rhythm and timbre features.</p>
<table>
<thead>
<tr>
<th>Types</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>Tempo</td>
<td>Beats per Minute (BPM)</td>
</tr>
<tr>
<td>LLD</td>
<td>Low-level standard descriptors from the MPEG-7 audio standard (12 attributes)</td>
</tr>
<tr>
<td>Timbre</td>
<td>Spectral centroid, Spectral rolloff, Spectral flux, Spectral kurtosis</td>
</tr>
<tr>
<td>Intensity</td>
<td>Labels of intensity from 0 to 9 were applied to instances by a human listener</td>
</tr>
<tr>
<td>Another 12 attributes</td>
<td>Generated by a genetic algorithm using the Sony Extractor Discovery System (EDS)</td>
</tr>
</tbody>
</table>
<p>Tools recommended：Wavelet tools, MPEG-7 Low Level Descriptors, Sony Extractor Discovery System (EDS)  </p>
<p>P4. Modeling emotional content of music using system identification(TSMC2005 <em>Cited: 104’</em>)</p>
<table>
<thead>
<tr>
<th>Types</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dynamiscs</td>
<td>Loudness level, Short term max.loudness</td>
</tr>
<tr>
<td>Mean Pitch</td>
<td>Power spectrum centroid, Mean STFT centroid</td>
</tr>
<tr>
<td>Pitch Variation</td>
<td>Mean STFT Flux, Std dev. STFT flux, Std dev. STFT centroid</td>
</tr>
<tr>
<td>Timbre</td>
<td>Timbral Width, Mean STFT rolloff, Std. dev. STFT rolloff, Sharpness(Zwicker and Fastl)</td>
</tr>
<tr>
<td>Harmony</td>
<td>Spectral dissonance(Hutchinson and Knopoff), Spectral dissonance(Sethares), Tonal dissonance(Hutchinson and Knopoff), Tonal dissonance(Sethares), Complex tonalness</td>
</tr>
<tr>
<td>Tempo</td>
<td>Beats Per Minute</td>
</tr>
<tr>
<td>Texture</td>
<td>Multiplicity</td>
</tr>
</tbody>
</table>
<p>Tools recommended：PsySound, Marsyas</p>
<p>P5. Music Emotion Classification: A Fuzzy Approach(ACM MM2006 <em>Cited: 142’</em>)<br>This paper used PsySound2 to extract music features and choose 15 features as recommended in P1. “begins with all 15 features and then greedily removes the worst feature sequentially until no more accuracy improvement can be obtained.” Same as <a href="./papers/popmusic.22.pdf">Detecting and Classifying Emotion in Popular Music</a>(JCIS2006 <em>Cited: 22’</em>)</p>
<table>
<thead>
<tr>
<th>Types</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>Loudnedss related</td>
<td>Dynamics</td>
</tr>
<tr>
<td>Pitch related</td>
<td>Mean pitch, Pitch range, Variation in pitch, Melodic contour, Register, Mode, Timbre, Harmony</td>
</tr>
<tr>
<td>Duration related</td>
<td>Tempo, Articulation, Note onset, Vibrato, Rhythm, Metre</td>
</tr>
</tbody>
</table>
<p>Tools recommended：PsySound2</p>
<p>P6. Multi-Label Classification of Music into Emotions(ISMIR2008 <em>Cited: 529’</em>)  </p>
<table>
<thead>
<tr>
<th>Types</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>Rhythm</td>
<td>The two highest peaks and computing their amplitudes, their BMPs (beats per minute) and the high-to-low ratio of their BPMs; Summing the histogram bins between 40-90, 90-140 and 140- 250 BPMs respectively. -&gt; 8</td>
</tr>
<tr>
<td>Timbre</td>
<td>the first 13 MFCCs, spectral centroid, spectral rolloff and spectral flux for per frame -&gt; 16 -&gt; The mean, std, mean std and std std over all frames -&gt; 64</td>
</tr>
</tbody>
</table>
<p>Tools recommended：Marsyas tool</p>
<p>P7. A regression approach to music emotion recognition(TASLP2008 <em>Cited: 319’</em>)<br>“extract musical features and construct a 114-dimension feature space”</p>
<table>
<thead>
<tr>
<th>Types</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>PsySound</td>
<td>Loudness, Level, Dissonance, Pitch -&gt; 44</td>
</tr>
<tr>
<td>Marsyas</td>
<td>Spectral centroid, Spectral rolloff, Spectral flux, Time domain zero-crossing and Mel-frequency cep- stral coefficient (MFCC) -&gt; 19, 6 rhythmic content features (by beat and tempo detection), 5 pitch content features (by multi- pitch detection) -&gt; 30</td>
</tr>
<tr>
<td>Spectral contrast</td>
<td>Capture the relative spectral information in each subband and utilize the spectral peak, spectral valley, and their dynamics as features -&gt; 12</td>
</tr>
<tr>
<td>DWCH</td>
<td>histograms of Daubechies wavelet co- efficients at different frequency subbands with different resolutions -&gt; 28</td>
</tr>
</tbody>
</table>
<p>Tools recommended：PsySound, Marsyas, Matlab</p>
<p>P8. Music emotion recognition: A state of the art review(ISMIR2010 <em>Cited: 268’</em>)<br>“An overview of the most common acoustic features used for mood recognition”  </p>
<table>
<thead>
<tr>
<th>Types</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dynamics</td>
<td>RMS-Energy</td>
</tr>
<tr>
<td>Timbre</td>
<td>MFCCs, Spectral-Shape, Spectral-Contrast</td>
</tr>
<tr>
<td>Harmony</td>
<td>Roughness, Harmonic-Change, Key-Clarity, Majorness</td>
</tr>
<tr>
<td>Register</td>
<td>Chromagram, Chroma-Centroid and Deviation</td>
</tr>
<tr>
<td>Rhythm</td>
<td>Rhythm-Strength, Regularity, Tempo, Beat-Histograms</td>
</tr>
<tr>
<td>Articulation</td>
<td>Event-Density, Attack-Slope, Attack-Time</td>
</tr>
</tbody>
</table>
<p>Tools recommended：MIRtoolbox  </p>
<p>P9. Machine recognition of music emotion: A review(TIST2012 <em>Cited: 139’</em>)<br>“briefly review some features that have been utilized in MER”</p>
<table>
<thead>
<tr>
<th>Types</th>
<th>Features</th>
</tr>
</thead>
<tbody>
<tr>
<td>Energy</td>
<td>Audio power, Total loudness, Specific loudness sensation coefficients(SONE)</td>
</tr>
<tr>
<td>Rhythm</td>
<td>Rhythm Strength, Rhythm Regularity, Rhythm Clarity, Average onset frequency, Average tempo</td>
</tr>
<tr>
<td>Melody</td>
<td>Salient Pitch, Chromagram center, Key clarity, Mode, Harmonic change</td>
</tr>
<tr>
<td>Timbre</td>
<td>MFCC</td>
</tr>
</tbody>
</table>
<p>Tools recommended：MA Toolbox, MIRtoolbox, Marsyas tool</p>
<p>P10. Developing a benchmark for emotional analysis of music(PloSone2017)<br>This is a interesting competive workshop.<br>“Performance of the different feature-sets on valence, development and evaluation-sets of 2015, 20 fold cross-validation”<br><img src="/2017/04/27/MERFeature/journal.pone.0173392.t007.PNG"><br>“Performance of the different feature-sets on arousal, development and evaluation-sets of 2015, 20 fold cross-validation”<br><img src="/2017/04/27/MERFeature/journal.pone.0173392.t008.PNG"></p>
<p>Tools recommended：OpenSMILE</p>
<h2 id="Findings"><a href="#Findings" class="headerlink" title="Findings"></a>Findings</h2><ol>
<li><p>Every lab has its own emo-features-set in music. Most common used features:<br>MFCCs, Loudness, Spectral features (centroid, flux, rolloff, flatness), Timbre, Rhythm, Pitch, Harmony, Zero crossing rate</p>
</li>
<li><p>Acoustic feature extraction has better use a number of tools to give a broad mix from which to select the best features:<br>Marsyas, MIRtoolbox, PsySound, OpenSMILE</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> MER </tag>
            
            <tag> feature </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音乐情感计算相关期刊收集整理]]></title>
      <url>/2017/04/27/journals/</url>
      <content type="html"><![CDATA[<h2 id="SCI"><a href="#SCI" class="headerlink" title="SCI"></a>SCI</h2><ul>
<li>TIST<br><a href="http://tist.acm.org/index.cfm" target="_blank" rel="external">ACM Transactions on Intelligent Systems and Technology</a></li>
<li>TAC<br><a href="http://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=5165369" target="_blank" rel="external">IEEE Transactions on Affective Computing</a></li>
<li>TMM<br><a href="https://signalprocessingsociety.org/publications-resources/ieee-transactions-multimedia" target="_blank" rel="external">IEEE Transactions on Multimedia</a></li>
<li>TAP<br><a href="https://signalprocessingsociety.org/publications-resources/ieee-transactions-signal-processing" target="_blank" rel="external">IEEE Transactions on Signal Processing</a></li>
</ul>
<a id="more"></a>
<h2 id="EI"><a href="#EI" class="headerlink" title="EI"></a>EI</h2><ul>
<li>TASLP<br><a href="http://signalprocessingsociety.org/publications-resources/ieeeacm-transactions-audio-speech-and-language-processing/ieeeacm" target="_blank" rel="external">IEEE/ACM Transactions on Audio, Speech, and Language Processing</a>  </li>
<li>JAIST<br><a href="https://www.asist.org/publications/jasist/" target="_blank" rel="external">Journal of the Association for Information Science and Technology</a></li>
</ul>
<h2 id="相关会议"><a href="#相关会议" class="headerlink" title="相关会议"></a>相关会议</h2><ul>
<li>ICMC<br>International Computer Music Conference  </li>
<li>ICASSP<br>IEEE International Conference on Acoustics, Speech<br>and Signal Processing</li>
<li>MM<br>ACM Multimedia</li>
<li>ISMIR<br>International Society for Music Information<br>Retrieval Conference</li>
</ul>
<h2 id="相关比赛"><a href="#相关比赛" class="headerlink" title="相关比赛"></a>相关比赛</h2><ul>
<li><a href="http://compare.openaudio.eu/" target="_blank" rel="external">Interspeech Computational Paralinguistics ChallengE (ComParE)</a></li>
<li><a href="http://www.multimediaeval.org/" target="_blank" rel="external">MediaEval</a> </li>
<li><a href="http://sspnet.eu/" target="_blank" rel="external">AVEC ACM MM</a></li>
<li><a href="http://www.music-ir.org/mirex/wiki/MIREX_HOME" target="_blank" rel="external">MIREX</a></li>
</ul>
<h2 id="期刊类型"><a href="#期刊类型" class="headerlink" title="期刊类型"></a>期刊类型</h2><p>判断期刊是否是SCI/EI:<br>EI: <a href="https://www.engineeringvillage.com/search/quick.url" target="_blank" rel="external">Engineering Vallige</a> Database选择Compendex（IE网络版）<br>SCI: <a href="http://ip-science.thomsonreuters.com/mjl/" target="_blank" rel="external">期刊列表</a>，<a href="http://apps.webofknowledge.com/UA_GeneralSearch_input.do?product=UA&amp;search_mode=GeneralSearch&amp;SID=3CXjlEnOuKswueSjVDT&amp;preferencesSaved=" target="_blank" rel="external">查询文章</a>选择World of Science</p>
]]></content>
      
        
        <tags>
            
            <tag> MER </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github Pages + Hexo]]></title>
      <url>/2017/04/26/NewBlog/</url>
      <content type="html"><![CDATA[<h1 id="博客站点迁移"><a href="#博客站点迁移" class="headerlink" title="博客站点迁移"></a>博客站点迁移</h1><p>阿里云服务器快要到期不想再续，遂决定将博客迁移到免费的<code>GitHub Pages</code>上。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Github Pages</code>+<code>Hexo</code>(不使用<code>Jekyll</code>是因为没有找到好看的主题)  </p>
<ol>
<li>在GitHub上创建<code>GitHub Pages</code></li>
<li>配置本地<code>Hexo</code>环境，并与<code>GitHub Pages</code>绑定</li>
<li>绑定域名</li>
</ol>
<a id="more"></a>
<h2 id="创建Github-Pages"><a href="#创建Github-Pages" class="headerlink" title="创建Github Pages"></a>创建Github Pages</h2><p>直接在<code>GitHub</code>网站上创建一个仓库，仓库名必须为<code>myusername.github.io</code>。<br><img src="/2017/04/26/NewBlog/1493223050689.png"></p>
<h2 id="安装并配置Hexo"><a href="#安装并配置Hexo" class="headerlink" title="安装并配置Hexo"></a>安装并配置Hexo</h2><p>Step1. 根据<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo中文文档</a>中的提示进行安装：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#先安装依赖库Node.js（假定已经安装好了Git）</div><div class="line">$ brew install Node.js</div><div class="line">#下载安装Hexo</div><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>Step2. 开始在本地建站</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;Blogfolder&gt;</div><div class="line">$ cd &lt;Blogfolder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>Step3. 在博客文件根目录下打开终端，启动本地服务器查看建站是否成功。成功后可以在<code>localhost:4000</code>浏览博客Hello World。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<img src="/2017/04/26/NewBlog/1493223087552.png">
<p>Step4. 根据<a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Hexo配置文档</a>部署网站到<code>github pages</code><br>a. 修改站点配置文件<code>_config.yml</code>(Blogfolder/_config.yml)中的Deployment模块，把其中repo字段的值替换成自己github pages提交代码的git地址。(如果使用ssh，将<code>repo</code>改为相应ssh地址)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/HuiZhangDB/HuiZhangDB.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>b.安装Hexo的Git部署插件<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>c. 现在可以把它发布到GitHub Pages上啦！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean  #清除缓存，在更改主题等后要使用</div><div class="line">$ hexo g      #生成静态文件</div><div class="line">$ hexo d      #部署网站</div></pre></td></tr></table></figure>
<p>d. 在浏览器输入<code>http://myusername.github.io</code>可以看到自己的博客啦~</p>
<p>Step.5 自定义Hexo主题<br><a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo模板</a>中有许多好看的模板可以选择，我选择了简洁好看的<a href="https://github.com/ahonn/hexo-theme-even" target="_blank" rel="external">even</a>主题。它的<a href="https://github.com/ahonn/hexo-theme-even/wiki" target="_blank" rel="external">主题文档</a>很详细地写了设置步骤，这里不再赘述。</p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ol>
<li>购买域名</li>
<li>选择一个DNS解析服务器</li>
<li><p>域名解析到<code>myusrname.github.io</code>，以及Github Pages提供的IP:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192.30.252.153</div><div class="line">192.30.252.154</div></pre></td></tr></table></figure>
</li>
<li><p>在本地站点的<code>source</code>文件夹中创建<code>CNAME</code>文件，填写域名（不加http://）</p>
</li>
<li>将本地站点部署更新到Github Pages</li>
<li>等待DNS解析生效</li>
<li>可以在浏览器输入自己的域名查看博客啦！</li>
</ol>
<h2 id="可以开始写文章啦！"><a href="#可以开始写文章啦！" class="headerlink" title="可以开始写文章啦！"></a>可以开始写文章啦！</h2><p>为了方便管理文章中的图片等资源，可以开启<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="external">Hexo的资源文件管理功能</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#将站点配置文件_config.yml中的post_asset_folder选项设为true来打开</div><div class="line">post_asset_folder: true</div></pre></td></tr></table></figure>
<p>接下来就可以开始自由写作啦~</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo new (post) title</div><div class="line">...writing</div><div class="line">$ hexo clean</div><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>
<p>为了方便文章管理，Hexo提供了可视化写作插件<a href="https://github.com/nihgwu/hexo-hey" target="_blank" rel="external">hey</a>，优点是可以拖拽图片，缺点是不方便随时写作。  </p>
<h2 id="第三方服务设置"><a href="#第三方服务设置" class="headerlink" title="第三方服务设置"></a>第三方服务设置</h2><h3 id="添加统计分析"><a href="#添加统计分析" class="headerlink" title="添加统计分析"></a>添加统计分析</h3><p>主题<a href="https://github.com/ahonn/hexo-theme-even" target="_blank" rel="external">even</a>提供了对于百度统计和Google统计的支持，只需要修改主题配置文件中的<code>baidu_analytics</code>或<code>google_analytics</code>字段，填写<code>analytics id</code>就可以开启统计。</p>
<p>例如开启百度统计：<br>step1. 在百度统计网站注册账号<br>step2. 添加自有网站<br>step3. 获取统计代码，得到其中的<code>baidu analytics id</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> _hmt = _hmt || [];</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">  hm.src = <span class="string">"https://hm.baidu.com/hm.js?this_code_is_the_baidu_analysis_id"</span>;</div><div class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>]; </div><div class="line">  s.parentNode.insertBefore(hm, s);</div><div class="line">&#125;)();</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>step4. 将<code>baidu analytics id</code>填入主题配置文件的<code>baidu_analytics</code>字段。<br>step5. 百度统计网站上检查代码成功，过一会就可以查看分析报告啦！</p>
<!--### 添加评论服务
主题[even](https://github.com/ahonn/hexo-theme-even)提供了对于多说、Disqus和网易云跟帖的支持，由于多说即将关闭，本博客选择使用网易云跟帖。

1. 在[网易云跟帖](https://gentie.163.com/)注册账号，进入后台管理，设置站点信息，获取代码；
2. 修改主题配置文件中的`netease_key`字段，开启网易云跟帖；
3. 对于不开启评论的页面，文件头添加`comments`字段，设置为`false`。

网站部署更新后可以看到评论啦。-->
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>HuisBlog博客搭建过程主要参考<a href="http://www.jianshu.com/p/834d7cc0668d" target="_blank" rel="external">水瓶座iOSer的简书</a>，在此提出感谢。</p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python2.7 基础学习笔记]]></title>
      <url>/2016/12/26/Python/index/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Python基础学习</p>
<blockquote>
<ul>
<li><a href="/2016/12/02/Python/PythonBasis/" title="语法基础与高级特性">语法基础与高级特性</a>  </li>
<li><a href="/2016/12/04/Python/PythonFunction/" title="函数式编程">函数式编程</a>  </li>
<li><a href="/2016/12/05/Python/PythonModule/" title="模块">模块</a></li>
<li><a href="/2016/12/06/Python/PythonOOP/" title="面向对象编程">面向对象编程</a></li>
<li><a href="/2016/12/06/Python/PythonAdOOP/" title="面向对象高级编程">面向对象高级编程</a>    </li>
<li><a href="/2016/12/06/Python/PythonDebug/" title="错误、调试与测试">错误、调试与测试</a></li>
<li><a href="/2016/12/06/Python/PythonIO/" title="IO编程">IO编程</a></li>
<li><a href="/2016/12/06/Python/PythonRE/" title="正则表达式">正则表达式</a>  </li>
<li><a href="/2016/12/26/Python/Socket/" title="Socket通信">Socket通信</a> </li>
<li><a href="/2016/12/26/Python/PythonWeb/" title="Web简介">Web简介</a> </li>
<li><a href="/2016/12/06/Python/PythonTips/" title="Python小贴士">Python小贴士</a> 
</li>
</ul>
</blockquote>
</blockquote>
<font color="#F79159"><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>。</strong> </font>

]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[矩阵运算]]></title>
      <url>/2016/12/26/Python/PythonMat/</url>
      <content type="html"><![CDATA[<p>Python的<code>numpy</code>模块提供矩阵运算的功能，其中有两种不同的数据类型<code>matrix</code>和<code>array</code>都可以用于处理行列表示的数字元素。虽然它们看起来相似，但是在这两个数据类型上执行相同的数学运算可以得到不同的结果，其中<code>matrix</code>与MATLAB中的<code>matrices</code>等价。</p>
<p>具体来说，<code>matrix</code>是<code>array</code>的子类，要求维数必须为2。需要注意的是<code>array</code>的<code>*</code>表示元素分别相乘，<code>dot</code>才表示矩阵点乘。</p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Socket通信]]></title>
      <url>/2016/12/26/Python/Socket/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="socket中TCP的三次握手建立连接"><a href="#socket中TCP的三次握手建立连接" class="headerlink" title="socket中TCP的三次握手建立连接"></a>socket中TCP的三次握手建立连接</h2><img src="/2016/12/26/Python/Socket/tcpsend.png">
<h2 id="socket中TCP的四次握手释放连接"><a href="#socket中TCP的四次握手释放连接" class="headerlink" title="socket中TCP的四次握手释放连接"></a>socket中TCP的四次握手释放连接</h2><img src="/2016/12/26/Python/Socket/tcpend.png">
<p>TCP客户端和服务器端通信例子： </p>
<ul>
<li><a href="/2016/12/26/Python/Socket/tcp_client.py" title="客户端">客户端</a></li>
<li><a href="/2016/12/26/Python/Socket/tcp_server.py" title="服务器端">服务器端</a>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python Web]]></title>
      <url>/2016/12/26/Python/PythonWeb/</url>
      <content type="html"><![CDATA[<h2 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h2><p>HTML定义了页面的内容，CSS控制了页面元素的样式，而JavaScript负责页面的交互逻辑。</p>
<a id="more"></a>
<h2 id="WSGI-Web-Server-Gateway-Interface"><a href="#WSGI-Web-Server-Gateway-Interface" class="headerlink" title="WSGI(Web Server Gateway Interface)"></a>WSGI(Web Server Gateway Interface)</h2><p>处理TCP连接，HTTP原始请求和相应格式。</p>
<p>无论多么复杂的Web应用程序，入口都是一个WISG处理函数。HTTP请求的所有输入信息都可以通过<code>environ</code>获得，HTTP响应的输出都可以通过<code>start_response()</code>加上函数返回值作为Body。</p>
<h2 id="使用Web框架"><a href="#使用Web框架" class="headerlink" title="使用Web框架"></a>使用Web框架</h2><p>实现url到函数的映射</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>Model-View-Controller，”模型-视图-控制器“。</p>
<p>最大限度分离Python代码和HTML代码</p>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python错误、调试和测试]]></title>
      <url>/2016/12/06/Python/PythonDebug/</url>
      <content type="html"><![CDATA[<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p><code>try</code>…<code>except</code>…<code>finnaly</code>…</p>
<a id="more"></a>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><p>简单粗暴不加以赘述</p>
<h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p>凡是用<code>print</code>来辅助查看的地方，都可以用断言<code>assert</code>来代替。如果断言失败，<code>assert</code>语句本身就会抛出<code>AssertionError</code>。</p>
<p>在启动Python解释器时，可以使用<code>-O</code>参数来关闭<code>assert</code>,此时所有的<code>assert</code>语句可以被看做<code>pass</code>。</p>
<h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><p><code>logging</code>不会抛出错误，而且会=可以输出到文件。</p>
<h3 id="pdb和IDE"><a href="#pdb和IDE" class="headerlink" title="pdb和IDE"></a>pdb和IDE</h3><p>虽然IDE用起来比较方便，但是最后你会发现logging才是终极武器。</p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作，是未来重构代码的信心保证。</p>
<p>单元测试的测试用例要覆盖常用的输入组合、边界条件和各种异常。单元测试代码要非常简单，如果测试代码太复杂，那么它可能本身就有bug。</p>
<h2 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h2><p><code>doctest</code>可以直接提取注释中的代码并执行测试。<code>doctest</code>严格按照Python交互式命令行的输入和输出来判断测试结果是否正确。只有测试异常的时候可以用<code>...</code>表示中间一大段烦人的输出。测试文档<a href="/2016/12/06/Python/PythonDebug/mydict.py" title="mydict.py">mydict.py</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding = utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dict</span><span class="params">(dict)</span>:</span></div><div class="line">	<span class="string">'''</span></div><div class="line"><span class="string">	a simple dict</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">	&gt;&gt;&gt; d1 = Dict()</span></div><div class="line"><span class="string">	&gt;&gt;&gt; d1['x'] = 100</span></div><div class="line"><span class="string">	&gt;&gt;&gt; d1.x</span></div><div class="line"><span class="string">	100</span></div><div class="line"><span class="string">	&gt;&gt;&gt; d1.y = 200</span></div><div class="line"><span class="string">	&gt;&gt;&gt; d1['y']</span></div><div class="line"><span class="string">	200</span></div><div class="line"><span class="string">	&gt;&gt;&gt; d2 = Dict(a=1,b=2,c='3')</span></div><div class="line"><span class="string">	&gt;&gt;&gt; d2.c</span></div><div class="line"><span class="string">	'3'</span></div><div class="line"><span class="string">    &gt;&gt;&gt; d2['empty']</span></div><div class="line"><span class="string">    Traceback (most recent call last):</span></div><div class="line"><span class="string">        ...</span></div><div class="line"><span class="string">    KeyError: 'empty'</span></div><div class="line"><span class="string">    &gt;&gt;&gt; d2.empty</span></div><div class="line"><span class="string">    Traceback (most recent call last):</span></div><div class="line"><span class="string">        ...</span></div><div class="line"><span class="string">    AttributeError: 'Dict' object has no attribute 'empty'</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    </div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,**kw)</span>:</span></div><div class="line">		super(Dict,self).__init__(**kw)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self,key)</span>:</span></div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			<span class="keyword">return</span> self[key]</div><div class="line">		<span class="keyword">except</span> KeyError:</div><div class="line">			<span class="keyword">raise</span> AttributeError(<span class="string">"'Dict' object has no attribute '%s'"</span> %key)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self,key,value)</span>:</span></div><div class="line">		self[key] = value</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	<span class="keyword">import</span> doctest</div><div class="line">	doctest.testmod()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ python mydict.py</div><div class="line">$</div><div class="line"><span class="comment">#什么输出也没有说明doctest的运行都是正确的.</span></div><div class="line"><span class="comment">#如果程序有问题比如注释掉'__getattr__()'，再运行就会出错：</span></div><div class="line">$ python mydict.py</div><div class="line">**********************************************************************</div><div class="line">File <span class="string">"mydict.py"</span>, line <span class="number">10</span>, <span class="keyword">in</span> __main__.Dict</div><div class="line">Failed example:</div><div class="line">    d1.x</div><div class="line">Exception raised:</div><div class="line">    Traceback (most recent call last):</div><div class="line">      ...</div><div class="line">    AttributeError: <span class="string">'Dict'</span> object has no attribute <span class="string">'x'</span></div><div class="line">**********************************************************************</div><div class="line">File <span class="string">"mydict.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> __main__.Dict</div><div class="line">Failed example:</div><div class="line">    d2.c</div><div class="line">Exception raised:</div><div class="line">    Traceback (most recent call last):</div><div class="line">      ...</div><div class="line">    AttributeError: <span class="string">'Dict'</span> object has no attribute <span class="string">'c'</span></div><div class="line">**********************************************************************</div><div class="line"><span class="number">1</span> items had failures:</div><div class="line">   <span class="number">2</span> of   <span class="number">9</span> <span class="keyword">in</span> __main__.Dict</div><div class="line">***Test Failed*** <span class="number">2</span> failures.</div></pre></td></tr></table></figure>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python面向对象高级编程]]></title>
      <url>/2016/12/06/Python/PythonAdOOP/</url>
      <content type="html"><![CDATA[<h2 id="实例动态绑定"><a href="#实例动态绑定" class="headerlink" title="实例动态绑定"></a>实例动态绑定</h2><p>通常情况下，我们可以给实例绑定任何属性和方法，这就是动态语言的灵活性。但是给一个实例绑定的方法对另一个实例是不起作用的。为了给所有实例都绑定方法，可以给class绑定方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addmethod</span><span class="params">(self)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line">	</div><div class="line">Student.addmethod = MethodType(addmethod,<span class="keyword">None</span>,Student)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果想要限制class的属性，可以使用特殊变量<code>__slots__</code>来限制该class能添加的属性：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    __slots__ = (<span class="string">'name'</span>,<span class="string">'age'</span>)<span class="comment">#用tuple定义允许绑定的属性名称</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Micheal'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">8</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">90</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></div></pre></td></tr></table></figure>
<p>需要注意的是，<code>__score__</code>中定义的属性仅对当前类起作用，对继承的子类是不起作用的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">GraduateStudent</span><span class="params">(Student)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">pass</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = GraduateStudent()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g.score = <span class="number">99</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g.score</div><div class="line"><span class="number">99</span></div></pre></td></tr></table></figure>
<h2 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h2><p><code>@property</code>是Python内置的一个装饰器，可以把一个getter方法变成属性，同时还会创建另一个装饰器<code>@xxx.setter</code>，负责把一个setter方法变成属性赋值，这样我们就拥有了一个可控的属性操作。如果只定义getter方法而不定义setter方法就会得到一个只读属性。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    @property</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> self._score</div><div class="line"><span class="meta">... </span>    @score.setter</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self,value)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value,int):</div><div class="line"><span class="meta">... </span>                    <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer'</span>)</div><div class="line"><span class="meta">... </span>            <span class="keyword">if</span> value&lt;<span class="number">0</span> <span class="keyword">or</span> value&gt;<span class="number">100</span>:</div><div class="line"><span class="meta">... </span>                    <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0~100'</span>)</div><div class="line"><span class="meta">... </span>            self._score = value</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score</div><div class="line"><span class="number">99</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">101</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">10</span>, <span class="keyword">in</span> score</div><div class="line">ValueError: score must between <span class="number">0</span>~<span class="number">100</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="string">'a'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">8</span>, <span class="keyword">in</span> score</div><div class="line">ValueError: score must be an integer</div></pre></td></tr></table></figure>
<p>注意这里的<code>score</code>是一个property对象，getter方法和setter方法重用了这个名字，而<code>_score</code>是私有属性。实际属性值储存在<code>_score</code>中，<code>score</code>则为这个私有变量提供接口。如果混淆了两者就会出现可怕的bug：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    @property</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.score</div><div class="line"><span class="meta">... </span>    @score.setter</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self,value)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value,int):</div><div class="line"><span class="meta">... </span>                    <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer'</span>)</div><div class="line"><span class="meta">... </span>            <span class="keyword">if</span> value&lt;<span class="number">0</span> <span class="keyword">or</span> value&gt;<span class="number">100</span>:</div><div class="line"><span class="meta">... </span>                    <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0~100'</span>)</div><div class="line"><span class="meta">... </span>            self.score = value<span class="comment">#这里会无法停止循环调用score的setter方法</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  ...</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">11</span>, <span class="keyword">in</span> score</div><div class="line">RuntimeError: maximum recursion depth exceeded</div></pre></td></tr></table></figure>
<h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><p>一个子类可以通过多重继承同时获得多个父类的所有功能。</p>
<h3 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h3><p>在设计类的继承关系时，通常主线都是单一继承下来的，例如，<code>Dog</code>继承自<code>Animal</code>。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让<code>Dog</code>除了继承自<code>Animal</code>之外再同时继承<code>Runnable</code>。这种设计通常称之为<code>Mixin</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal,Runnable)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>为了更好地看出继承关系，我们把<code>Runnable</code>和<code>Flyable</code>改为<code>RunnableMixin</code>和<code>FlyableMixin</code>。类似的，还可以定义出肉食动物<code>CarnivorousMixin</code>和植食动物<code>HerbivoresMixin</code>，让某个动物同时拥有好几个Mixin：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal,RunnableMixin,CarnivorousMixin)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>Mixin的目的就是给一个类增加多个功能，这样在设计类的时候，我们优先考虑通过多重继承来组合多个Mixin的功能，而不是设计多层次的复杂的继承关系。</p>
<p>Python允许使用多重继承，因此Mixin是一种常见设计。而只允许单一继承的语言（如Java）不能使用Mixin的设计。</p>
<h2 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h2><p>Python中有许多特殊用途的函数可以帮助我们定制类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">__slots__</div><div class="line">__len__</div><div class="line">__str__</div><div class="line">__repr__</div><div class="line">__iter__</div><div class="line">__getitem__</div><div class="line">__getattr__</div><div class="line">__call__  <span class="comment">#可使用callable()来判断对象是否是“可调用”对象</span></div></pre></td></tr></table></figure>
<h2 id="使用元类"><a href="#使用元类" class="headerlink" title="使用元类"></a>使用元类</h2><p><code>type()</code>既可以返回一个对象的类型，还可以创建出新的类型。<br><code>metaclass</code>允许创建类或者修改类，可以把类看成是metaclass创建出的来的“实例”。</p>
<p><em>正常情况下不会碰到需要使用<code>metaclass</code>的情况，所以现在先略过。</em></p>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python进程和线程]]></title>
      <url>/2016/12/06/Python/PythonMulTask/</url>
      <content type="html"><![CDATA[<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>先略过多任务部分。。蓝瘦香菇。。</p>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python面向对象编程]]></title>
      <url>/2016/12/06/Python/PythonOOP/</url>
      <content type="html"><![CDATA[<p><code>数据封装</code>、<code>继承</code>和<code>多态</code>是面向对象的三大特点，<code>类</code>和<code>实例</code>是面向对象最重要的概念。在类中定义的函数与普通函数相比只有一点不同，就是第一个参数永远是是咧变量<code>self</code>，并且在调用时不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以仍然可以使用默认参数、可变参数和关键字参数。</p>
<a id="more"></a>
<h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><p>通过在实例上调用方法可以直接操作对象内部的数据，但无需知道方法内部的实现细节。即，可以用类的方法来<code>封装</code>其数据和逻辑。</p>
<p>和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></div><div class="line"><span class="meta">... </span>            self.name = name</div><div class="line"><span class="meta">... </span>            self.score = score</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">print</span> <span class="string">'%s: %s'</span> %(self.name, self.score)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">'Bart'</span>,<span class="number">98</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lisa = Student(<span class="string">'Lisa'</span>,<span class="number">80</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.age = <span class="number">8</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.age </div><div class="line"><span class="number">8</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lisa.age </div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'age'</span></div></pre></td></tr></table></figure>
<h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>想要类的内部属性不被外部访问，可以加上前缀<code>__</code>将其定义为私有变量。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,score)</span>:</span></div><div class="line"><span class="meta">... </span>            self.__name = name</div><div class="line"><span class="meta">... </span>            self.__score = score</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">print</span> <span class="string">'%s: %s'</span> %(self.name, self.score)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">'Bart'</span>,<span class="number">98</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'__name'</span></div></pre></td></tr></table></figure>
<p>这样使得外部代码不能随意修改对象内部的状态。但也可以使用<code>get_name</code>或者<code>set_score</code>这样的方法获取或者修改（可以检查参数避免传入无效参数）类属性。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">	<span class="keyword">return</span> self.__name</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_score</span><span class="params">(self,score)</span>:</span></div><div class="line">	<span class="keyword">if</span> <span class="number">0</span> &lt;= score &lt;= <span class="number">100</span>:</div><div class="line">			self.__score = score</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">raise</span> ValueError(<span class="string">'bad score'</span>)</div></pre></td></tr></table></figure>
<p>但值得注意的是，还有一种以一个下划线<code>_</code>开头的实例变量名，比如<code>_name</code>，这样的实例变量名外部是可以访问的，但按照约定俗成的规定，看到这样变量的意思是：“虽然我可以访问，但请把我视为一个私有变量，不要随意访问。”</p>
<h2 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h2><p>在定义一个class的时候可以从现有的class继承，新的class就是<code>子类(Subclass)</code>，被继承的class称为<code>基类、父类或超类(Superclass)</code>。继承可以把父类的所有功能都直接拿过来，子类只需要新增自己特有的方法，也可以把父类不合适的方法覆盖重写。</p>
<p>有了继承，才能有多态。多态使得调用父类型的方法时不需要考虑其切确的子类型，在运行时解释器会根据该对象的确切类型决定具体方法。在调用类实例的方法时，尽量把变量当做父类类型，这样所有的子类类型都可以被正常接收。著名的“开闭”原则：</p>
<ul>
<li>对拓展开放：允许新增子类</li>
<li>对修改封闭：不需要修改依赖父类的函数</li>
</ul>
<p>任何时候，如果没有合适的类可以继承，就继承自object类。</p>
<h2 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h2><p>在不知道对象信息的时候可以使用内置函数剖析对象获得内部数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type(<span class="number">123</span>)              <span class="comment">#返回一个type类型，指明对象类型</span></div><div class="line">isinstance(<span class="string">'a'</span>,str)    <span class="comment">#返回布尔值，判断对象是否是某种类型</span></div><div class="line">dir(<span class="string">'ABC'</span>)             <span class="comment">#返回一个list，包含对象的所有属性和方法</span></div></pre></td></tr></table></figure>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python正则表达式]]></title>
      <url>/2016/12/06/Python/PythonRE/</url>
      <content type="html"><![CDATA[<h2 id="匹配符"><a href="#匹配符" class="headerlink" title="匹配符"></a>匹配符</h2><table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\d</code></td>
<td>数字</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>字母或数字</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>空白符</td>
</tr>
<tr>
<td><code>.</code></td>
<td>任意字符</td>
</tr>
<tr>
<td><code>{n}</code>/<code>{n,m}</code></td>
<td>n个字符/n~m个字符</td>
</tr>
<tr>
<td><code>+</code></td>
<td>至少一个字符</td>
</tr>
<tr>
<td><code>*</code></td>
<td>任意个字符</td>
</tr>
<tr>
<td><code>?</code></td>
<td>0个或者1个字符</td>
</tr>
<tr>
<td><code>[]</code></td>
<td>表示范围</td>
</tr>
<tr>
<td><code>^</code></td>
<td>开头</td>
</tr>
<tr>
<td><code>$</code></td>
<td>结尾</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.match(<span class="string">r'正则表达式'</span>,<span class="string">'输入字符串'</span>)</div><div class="line">re.splite(<span class="string">r'正则表达式'</span>,<span class="string">'输入字符串'</span>) <span class="comment">#切分字符串</span></div></pre></td></tr></table></figure>
<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>,<span class="string">'010-12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x10054fc68</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</div><div class="line"><span class="string">'010-12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</div><div class="line"><span class="string">'010'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</div><div class="line"><span class="string">'12345'</span></div></pre></td></tr></table></figure>
<h2 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h2><p>正则匹配默认是贪婪匹配，也就是说会匹配尽可能多的字符。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+)(0*)$'</span>,<span class="string">'102300'</span>).groups()</div><div class="line">(<span class="string">'102300'</span>, <span class="string">''</span>)</div><div class="line"><span class="comment">#\d+的贪婪匹配把后面的0全部匹配了，结果0*就只能匹配空字符串了</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r'^(\d+?)(0*)$'</span>,<span class="string">'102300'</span>).groups()</div><div class="line">(<span class="string">'1023'</span>, <span class="string">'00'</span>)</div><div class="line"><span class="comment">#加个？就可以让\d+采用非贪婪匹配（也就是尽可能少地匹配）</span></div></pre></td></tr></table></figure>
<h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>在Python中使用正则表达式时，re模块内部会干两件事：  </p>
<ol>
<li>编译正则表达式，如果正则表达式的字符串本省不合法就会报错；  </li>
<li>用编译后的正则表达式去匹配字符串。</li>
</ol>
<p>如果一个正则表达式需要重复使用几千次，考虑效率，可以预编译正则表达式，接下来不需要再重复编译了，直接匹配：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-12345'</span>).groups()</div><div class="line">(<span class="string">'010'</span>, <span class="string">'12345'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-80992'</span>).groups()</div><div class="line">(<span class="string">'010'</span>, <span class="string">'80992'</span>)</div></pre></td></tr></table></figure>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python小贴士]]></title>
      <url>/2016/12/06/Python/PythonTips/</url>
      <content type="html"><![CDATA[<h2 id="with…as"><a href="#with…as" class="headerlink" title="with…as"></a><code>with</code>…<code>as</code></h2><p>有一些任务，可能事先需要设置（setup），事后做清理工作（teardown）。对于这种场景，Python的with语句提供了一种非常方便的处理方式。一个很好的例子是文件处理，你需要获取一个文件句柄，从文件中读取数据，然后关闭文件句柄。</p>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PythonIO编程]]></title>
      <url>/2016/12/06/Python/PythonIO/</url>
      <content type="html"><![CDATA[<p>IO编程有两种模式，一种是<code>同步IO</code>，一种是<code>异步IO</code>。使用异步IO编写程序的性能会远远高于同步IO，但异步IO的缺点是编程模型复杂度远远高于同步IO。这里先讨论同步模式，异步IO复杂度太高，后续涉及到服务器端程序开发时再讨论。</p>
<a id="more"></a>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>操作文件的好习惯是使用<code>with</code>语句</p>
<h3 id="file-like-Object"><a href="#file-like-Object" class="headerlink" title="file-like Object"></a>file-like Object</h3><p>有<code>read()</code>方法的对象在Python中统称为file-like Object。除了文件外，还可以是内存的字节流、网络流、自定义流等。</p>
<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>为了避免手动转码，可以使用<code>codecs</code>模块。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>txt = <span class="string">u'测试'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>txt</div><div class="line"><span class="string">u'\u6d4b\u8bd5'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> codecs.open(<span class="string">'testw.txt'</span>,<span class="string">'w'</span>,<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    f.write(txt)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;closed file <span class="string">'testw.txt'</span>, mode <span class="string">'wb'</span> at <span class="number">0x10b35aae0</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> codecs.open(<span class="string">'testw.txt'</span>,<span class="string">'r'</span>,<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    f.read()</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="string">u'\u6d4b\u8bd5'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>u = <span class="string">u'\u6d4b\u8bd5'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> u</div><div class="line">测试</div></pre></td></tr></table></figure>
<h2 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h2><p>使用<code>os</code>,<code>os.path</code>以及<code>shutil</code>模块来操作文件和目录。<br>示例代码<a href="/2016/12/06/Python/PythonIO/search.py" title="search.py">search.py</a></p>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>将变量从内存中变成可存储或传输的过程称之为序列化(picking)，序列化之后的内容就可以写入磁盘或者通过网络传输到其它机器上。反之将变量内容从序列化的对象重新读到内存里称之为反序列化(unpicking)。</p>
<h3 id="pickle和Cpickle"><a href="#pickle和Cpickle" class="headerlink" title="pickle和Cpickle"></a>pickle和Cpickle</h3><p>只能用于Python，且不同版本彼此不兼容，只能用于保存不重要的数据。</p>
<h3 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dumps(obj,default)   <span class="comment">#object-&gt;json</span></div><div class="line">loads(json_str,object_hook)   <span class="comment">#json-&gt;object</span></div></pre></td></tr></table></figure>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python模块]]></title>
      <url>/2016/12/05/Python/PythonModule/</url>
      <content type="html"><![CDATA[<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>可以使用包<code>package</code>来组织模块，每一个包目录下都有一个<code>__init__.py</code>的文件，这个文件是必须存在的，否则Python会将其视为普通目录而不是一个包。<code>__init__.py</code>可以是空文件，也可以有Python代码，因为<code>__init__.py</code>本身就是一个模块，而它的模块名就是<code>package</code>。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">__author__ = <span class="string">'huizhang</span></div><div class="line"><span class="string">#!/usr/bin/env python</span></div><div class="line"><span class="string"># coding = utf-8</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'</span>This <span class="keyword">is</span> the comment of the document. The first string of any python file <span class="keyword">is</span> its comment.<span class="string">'</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">import sys</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">def BasicEx():</span></div><div class="line"><span class="string">    args = sys.argv   #sys模块的agrv变量将命令行的所有参数储存在了一个list中，argv至少有一个元素，因为第一个参数永远是该.py文件的名称</span></div><div class="line"><span class="string">    if len(args) == 1:</span></div><div class="line"><span class="string">        print '</span>Hello, word!<span class="string">'</span></div><div class="line"><span class="string">    elif len(args) == 2:</span></div><div class="line"><span class="string">        print '</span>Hello, %s!<span class="string">' %args[1]</span></div><div class="line"><span class="string">    else:</span></div><div class="line"><span class="string">        print '</span>Too many arguments!<span class="string">'</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">if __name__ == '</span>__main__<span class="string">': </span></div><div class="line"><span class="string">    BasicEx()</span></div><div class="line"><span class="string">    #在使用命令行运行.py文件时，Python解释器将一个特殊变量__name__置为'</span>__main___<span class="string">'，而如果在其他地方导入该模块，if判断将失效。因此这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</span></div></pre></td></tr></table></figure>
<p>在上述代码中，第2、3行是标准注释，第2行使得<code>BasicEx.py</code>可以直接在Unix/Linux/Mac上运行，第3行注释表示文件本身使用的是标准UTF-8编码。在命令行运行该文件的效果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ python BasicEx.py </div><div class="line">Hello, word!</div><div class="line">$ python BasicEx.py Hui</div><div class="line">Hello, Hui!</div><div class="line">$ python BasicEx.py Hui haha</div><div class="line">Too many arguments!</div></pre></td></tr></table></figure>
<p>而在启动Python交互环境之后：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> BasicEx</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>BasicEx.BasicEx()</div><div class="line">Hello, word!</div><div class="line"><span class="comment">#在导入时没有打印而是在调用函数之后才能打印出'Hello, word!'</span></div></pre></td></tr></table></figure>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>导入模块时可以使用别名，这样可以在运行时根据当前环境选择最合适的模块。比如，Python标准库一般会提供<code>StringIO</code>和<code>cStringIO</code>两个库，这两个库的接口和功能是一样的，但是<code>cStringIO</code>是用C写的，速度更快，所以可以经常看到这样的写法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">	<span class="keyword">import</span> cStringIO <span class="keyword">as</span> StringIO</div><div class="line"><span class="keyword">except</span> ImportError: <span class="comment">#导入失败会捕获到ImportError</span></div><div class="line">	<span class="keyword">import</span> StringIO</div></pre></td></tr></table></figure>
<p>这样就可以优先导入<code>cStringIO</code>。如果有些平台不提供<code>cStringIO</code>，还可以降级使用<code>StringIO</code>。在导入<code>cStringIO</code>的时候，用<code>import...as...</code>指定了别名<code>StringIO</code>。因此后续代码引用<code>StringIO</code>即可正常工作。</p>
<p>Python是动态语言，函数签名一致就接口一样，因此无论导入哪个模块后续代码都能正常工作。</p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Python通过前缀<code>_</code>来区别变量类别</p>
<ul>
<li>正常的函数和变量名是公开的，可以被直接引用。</li>
<li>类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上述<code>__name__</code>等，模块定义的文档注释也可以用特殊变量<code>__doc__</code>访问，我们自己的变量一般不使用这种变量名。</li>
<li>类似<code>_xxx</code>和<code>__xxx</code>这样的函数或者变量就是非公开的，仅仅在模块内部使用，而不应该被直接引用。</li>
</ul>
<p>我们所说的private函数和变量“不应该”被直接引用，不是说“不能”，因为Python没有一种方法可以完全限制访问private的函数或变量，但是从编程习惯上来说不应该引用private函数或变量。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_1</span><span class="params">(name)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'Hello, %s'</span> %name</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_private_2</span><span class="params">(name)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'Hi, %s'</span> %name</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(name)</span>:</span></div><div class="line">	<span class="keyword">if</span> len(name) &gt; <span class="number">3</span>:</div><div class="line">		<span class="keyword">return</span> _private_1(name)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">return</span> _private_2(name)</div></pre></td></tr></table></figure>
<p>我们在模块里公开<code>greeting()</code>函数，而把内部逻辑用private函数隐藏起来了，这样调用<code>greeting()</code>函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法。</p>
<p>即，外部不需要引用的函数全部定义为private，只有外部需要引用的函数才定义为public。</p>
<h2 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h2><p>为了不影响系统自带的Python（怕啥时候给搞崩了），使用<code>Homebrew</code>安装新的Python以供学习和练习。</p>
<p><a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a>是Mac下的一个包管理工具，它下载源码解压然后<code>./configure &amp;&amp; make install</code>,同时包含相关依存库。它会<code>自动配置好各种环境变量</code>，并<code>易于卸载和更新</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ brew install python</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">successfully installed</div><div class="line">.</div><div class="line">$ python</div><div class="line">Python <span class="number">2.7</span><span class="number">.12</span> (default, Dec  <span class="number">6</span> <span class="number">2016</span>, <span class="number">12</span>:<span class="number">19</span>:<span class="number">10</span>) </div><div class="line">[GCC <span class="number">4.2</span><span class="number">.1</span> Compatible Apple LLVM <span class="number">8.0</span><span class="number">.0</span> (clang<span class="number">-800.0</span><span class="number">.42</span><span class="number">.1</span>)] on darwin</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p><code>Homebrew</code>安装的python路径是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/Frameworks/Python.framework/Versions/</div></pre></td></tr></table></figure>
<p>备注一下<code>Homebrew</code>的常用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">brew list            # 列出本机通过brew安装的所有软件</div><div class="line">brew search xxx      # 模糊搜索brew 支持的软件。如果不加软件名，就会列出所有它支持的软件。</div><div class="line">brew install xxx     # 安装源码</div><div class="line">brew info xxx        # 显示软件的各种信息，包括版本啊源码地址啊</div><div class="line">brew uninstall xxx   # 卸载软件，很爽，一键静默卸载</div><div class="line">brew update          # 更新 Homebrew 本身</div><div class="line">brew outdated        # 看一下哪些软件可以升级</div><div class="line">brew upgrade xxx     # 如果不是所有的都要升级，那就这样升级指定的软件</div><div class="line">brew upgrade         # 如果都要升级，直接升级完所有可以更新的软件</div><div class="line">brew cleanup         # 然后清理干净各种下载的缓存</div></pre></td></tr></table></figure>
<h2 id="安装使用第三方模块"><a href="#安装使用第三方模块" class="headerlink" title="安装使用第三方模块"></a>安装使用第三方模块</h2><p>Python安装第三方模块是通过setuptools这个工具完成的。Python有两个封装了setuptools的包管理工具：<code>easy_install</code>和<code>pip</code>。目前官方推荐使用<code>pip</code>。  </p>
<p>举例安装一个常用的用于图片处理的第三方库<code>PIL</code>(Python Imaging Library, 现改名为Pillow)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ pip install Pillow </div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>im = Image.open(<span class="string">'./Desktop/test.jpg'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> im.format, im.size, im.mode</div><div class="line">JPEG (<span class="number">274</span>, <span class="number">274</span>) RGB</div></pre></td></tr></table></figure>
<h3 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a>模块搜索路径</h3><p>当我们试图加载一个模块的时候，Python会在指定路径下搜索对应的.py文件。默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在<code>sys</code>模块的<code>path</code>变量中。可以查看当前的搜索路径：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</div><div class="line">[<span class="string">''</span>, <span class="string">'/usr/local/Cellar/python/2.7.12_2/Frameworks/Python.framework/Versions/2.7/lib/python27.zip'</span>, <span class="string">'/usr/local/Cellar/python/2.7.12_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7'</span>, <span class="string">'/usr/local/Cellar/python/2.7.12_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin'</span>, <span class="string">'/usr/local/Cellar/python/2.7.12_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac'</span>, <span class="string">'/usr/local/Cellar/python/2.7.12_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages'</span>, <span class="string">'/usr/local/Cellar/python/2.7.12_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk'</span>, <span class="string">'/usr/local/Cellar/python/2.7.12_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old'</span>, <span class="string">'/usr/local/Cellar/python/2.7.12_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload'</span>, <span class="string">'/usr/local/lib/python2.7/site-packages'</span>, <span class="string">'/Library/Python/2.7/site-packages/pip-7.1.2-py2.7.egg'</span>, <span class="string">'/Library/Python/2.7/site-packages'</span>]</div></pre></td></tr></table></figure>
<p>如果我们要添加自己的搜索目录，有两种方法：</p>
<ol>
<li>直接修改<code>sys.path.append(&#39;/my_py_scripts&#39;)</code></li>
<li>设置环境变量<code>PYTHONPATH</code>,该环境变量的值会被自动添加到模块搜索路径中。</li>
</ol>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python函数式编程]]></title>
      <url>/2016/12/04/Python/PythonFunction/</url>
      <content type="html"><![CDATA[<p>函数式编程是高度抽象的编程范式,纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的函数语言，由于函数内部的变量状态不确定，同样的输入可能得到不同的输出，这种函数是有副作用的。函数式编程允许将函数本身作为参数传入另一个函数，还允许返回一个函数。</p>
<p>Python对函数式编程提供部分支持。由于Python允许使用变量，因此Python不是纯函数式编程语言。</p>
<a id="more"></a>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>接受其它函数作为参数的函数称为高阶函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一个最简单的高阶函数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y,f)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> f(x)+f(y)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">-5</span>,<span class="number">6</span>,abs)</div><div class="line"><span class="number">11</span></div></pre></td></tr></table></figure>
<h3 id="map和reduce"><a href="#map和reduce" class="headerlink" title="map和reduce"></a>map和reduce</h3><p><code>map()</code>接受两个参数，一个函数和一个序列，将传入的函数依次作用到序列的每一个元素，并把结果作为新的list返回。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用map规范用户输入的英文名字</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">adapt</span><span class="params">(s)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> s.capitalize()</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L1 = [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L2= map(adapt,L1)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L2</div><div class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</div></pre></td></tr></table></figure>
<p><code>reduce()</code>把一个函数作用在一个序列上，这个函数必须接受两个参数，reduce()把结果继续和序列的下一个元素做累积计算。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x*y</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">(L)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> reduce(mul,L)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>prod([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</div><div class="line"><span class="number">720</span></div></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><code>filter()</code>过滤器根据返回值是<code>True</code>还是<code>False</code>来决定是否保留该元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#删除1~100中的所有素数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">notprime</span><span class="params">(n)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">2</span>:</div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">elif</span> <span class="number">0</span> <span class="keyword">in</span> [n%i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n)]:</div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>filter(notprime,range(<span class="number">1</span>,<span class="number">101</span>))</div><div class="line">[<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">42</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">72</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure>
<h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><p><code>sorted()</code>可以接收一个比较函数来实现自定义的排序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#倒序排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">reversed_cmp</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">if</span> x&lt;y:</div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">1</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">elif</span> x&gt;y:</div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">1</span>,<span class="number">2</span>,<span class="number">32</span>,<span class="number">44</span>,<span class="number">5</span>],reversed_cmp)</div><div class="line">[<span class="number">44</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure>
<h2 id="返回函数和闭包"><a href="#返回函数和闭包" class="headerlink" title="返回函数和闭包"></a>返回函数和闭包</h2><p>高阶函数除了可以接收函数作为参数外，还可以把函数作为结果值返回。<br>这样把相关参数和变量都保存在返回的函数称为<code>闭包(Closure)</code>，这样的程序结构具有极大的威力。<br>返回闭包的时候需要牢记的一点就是,返回函数不要使用任何循环变量，或者后续会发生变化的变量：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在闭包中使用循环变量会发生的情况</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    fs = []</div><div class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</div><div class="line"><span class="meta">... </span>            <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>                    <span class="keyword">return</span> i*i</div><div class="line"><span class="meta">... </span>            fs.append(f)</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> fs</div><div class="line"><span class="meta">... </span>            </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1,f2,f3 = count()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果一定要引用循环变量，可以再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变。</span></div><div class="line"><span class="comment">#这样的缺点是代码较长，可以使用lambda函数缩短代码。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    fs = []</div><div class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</div><div class="line"><span class="meta">... </span>            <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line"><span class="meta">... </span>                    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>                            <span class="keyword">return</span> j*j</div><div class="line"><span class="meta">... </span>                    <span class="keyword">return</span> g</div><div class="line"><span class="meta">... </span>            fs.append(f(i))</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> fs</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1,f2,f3 = count()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p><code>lambda</code>表示匿名函数，匿名函数的使用限制是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。因为匿名函数没有名字，所以不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以被赋给一个变量，再利用该变量来调用该函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一个简单的匿名函数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x: x*x</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">2</span>)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x10d2600c8</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可以把匿名函数作为返回值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    fs = []</div><div class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</div><div class="line"><span class="meta">... </span>            <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line"><span class="meta">... </span>                    <span class="keyword">return</span> <span class="keyword">lambda</span> : j*j</div><div class="line"><span class="meta">... </span>            fs.append(f(i))</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> fs</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1,f2,f3 = count()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1</div><div class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x10d260de8</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>在代码运行期间动态增加功能的方式称为装饰器，可以用来在不修改函数定义的前提下增强函数功能。装饰器本质上就是一个返回函数的高阶函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一个简单的装饰器，给函数调用添加日志。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">... </span>    @functools.wraps(func) <span class="comment">#保证包装后的函数签名不变</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kw)</span>:</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">print</span> <span class="string">'begin call %s()'</span> %func.__name__</div><div class="line"><span class="meta">... </span>            f = func(*args,**kw) <span class="comment">#func在这里已经执行</span></div><div class="line"><span class="meta">... </span>            <span class="keyword">print</span> <span class="string">'end call %s()'</span> %func.__name__</div><div class="line"><span class="meta">... </span>            <span class="keyword">return</span> f <span class="comment">#注意这里返回的f并不是一个函数，而是func(*args,**kw)的执行结果</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>@log</div><div class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'This is now'</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now()</div><div class="line">begin call now()</div><div class="line">This <span class="keyword">is</span> now</div><div class="line">end call now()</div></pre></td></tr></table></figure>
<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p><code>functools</code>模块提供的一个有意思的功能是偏函数，它和数学上偏函数的定义不一样。<code>functools.partial</code>的作用是设置某个函数的默认值，返回一个新的函数，使其调用更加简单。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int,base = <span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'10'</span>)</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'100'</span>)</div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<p>实际上，创建偏函数时接收的是<code>函数对象</code>、<code>*args</code>、<code>**kw</code>这三个参数。上面在传入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int2 = functools.partial(int,base = <span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>的时候：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int2(<span class="string">'10'</span>)</div><div class="line"><span class="comment">#相当于</span></div><div class="line">kw = &#123;<span class="string">'base'</span>: <span class="number">2</span>&#125;</div><div class="line">int(<span class="string">'10'</span>,**kw)</div></pre></td></tr></table></figure>
<p>再看下一个例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>max2 = functools.partial(max,<span class="number">10</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>max2(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<p>在这个例子中，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max2 = functools.partial(max,<span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>实际上把<code>10</code>作为了<code>*args</code>的一部分自动添加到了左边，也就是说：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">max2(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="comment">#相当于</span></div><div class="line">args = (<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">max(*args)</div></pre></td></tr></table></figure>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python基础语法]]></title>
      <url>/2016/12/02/Python/PythonBasis/</url>
      <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>整数</li>
<li>浮点数</li>
<li>布尔值</li>
<li>空值</li>
<li>字符串</li>
<li>list和tuple</li>
<li>dict和set</li>
</ul>
<a id="more"></a>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><ol>
<li>必选参数</li>
<li>默认参数<br> 默认参数必须指向不变参数</li>
<li>可变参数<br> <code>*args</code></li>
<li>关键字参数<br> <code>**kw</code></li>
</ol>
<p><code>参数组合的定义顺序必须是：必选参数、默认参数、可变参数、关键字参数。任意参数都可以通过类似这样的方式进项定义:func(*args,**kw)</code></p>
<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><ul>
<li>切片(Slice)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">L[start:end:every]</div></pre></td></tr></table></figure>
<ul>
<li>迭代</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">6</span>)]:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> x,y</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="number">1</span> <span class="number">2</span></div><div class="line"><span class="number">3</span> <span class="number">4</span></div><div class="line"><span class="number">5</span> <span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> enumerate([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> x</div><div class="line"><span class="meta">... </span></div><div class="line">(<span class="number">0</span>, <span class="string">'a'</span>)</div><div class="line">(<span class="number">1</span>, <span class="string">'b'</span>)</div><div class="line">(<span class="number">2</span>, <span class="string">'c'</span>)</div><div class="line"></div><div class="line"><span class="comment">#可以这样判断是否为迭代对象</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="keyword">print</span> isinstance(<span class="string">'abc'</span>,Iterable);<span class="comment">#True</span></div><div class="line"><span class="keyword">print</span> isinstance(<span class="number">123</span>,Iterable);<span class="comment">#False</span></div></pre></td></tr></table></figure>
<ul>
<li>列表生成式</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Hello'</span>,<span class="string">'Word'</span>,<span class="string">'I\'m'</span>,<span class="number">18</span>,<span class="string">'years'</span>,<span class="string">'old'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[l.lower() <span class="keyword">for</span> l <span class="keyword">in</span> L <span class="keyword">if</span> isinstance(l,str)]</div><div class="line">[<span class="string">'hello'</span>, <span class="string">'word'</span>, <span class="string">"i'm"</span>, <span class="string">'years'</span>, <span class="string">'old'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>生成器</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一边循环一边计算后续元素以节省大量空间（不必创建完整的list）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'step1'</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'step2'</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'step3'</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="number">3</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">step1</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">step2</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">step3</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> o:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> n</div><div class="line"><span class="meta">... </span></div><div class="line">step1</div><div class="line"><span class="number">1</span></div><div class="line">step2</div><div class="line"><span class="number">2</span></div><div class="line">step3</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p><strong>感谢网上恩师<a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="external">廖雪峰老师的Python教程</a>，本文大部分内容都摘自于此。</strong></p>
]]></content>
      
        <categories>
            
            <category> Python基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
